# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.20.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-19 02:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../CMake/Help/command/try_run.rst:2
msgid "try_run"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:5
msgid "Contents"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:8
msgid "Try compiling and then running some code."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:11
msgid "Try Compiling and Running Source Files"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:26
msgid ""
"Try compiling a ``<srcfile>``.  Returns ``TRUE`` or ``FALSE`` for success"
" or failure in ``<compileResultVar>``.  If the compile succeeded, runs "
"the executable and returns its exit code in ``<runResultVar>``.  If the "
"executable was built, but failed to run, then ``<runResultVar>`` will be "
"set to ``FAILED_TO_RUN``.  See the :command:`try_compile` command for "
"information on how the test project is constructed to build the source "
"file."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:33
msgid ""
"The names of the result variables ``<runResultVar>`` and "
"``<compileResultVar>`` are defined by the user.  Previously, they had "
"fixed names ``RUN_RESULT_VAR`` and ``COMPILE_RESULT_VAR``."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:38
msgid "The options are:"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:45
msgid "``CMAKE_FLAGS <flags>...``"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:41
msgid ""
"Specify flags of the form ``-DVAR:TYPE=VALUE`` to be passed to the "
"``cmake`` command-line used to drive the test build. The example in "
":command:`try_compile` shows how values for variables "
"``INCLUDE_DIRECTORIES``, ``LINK_DIRECTORIES``, and ``LINK_LIBRARIES`` are"
" used."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:49
msgid "``COMPILE_DEFINITIONS <defs>...``"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:48
msgid ""
"Specify ``-Ddefinition`` arguments to pass to :command:`add_definitions` "
"in the generated test project."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:52
msgid "``COMPILE_OUTPUT_VARIABLE <var>``"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:52
msgid "Report the compile step build output in a given variable."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:62
msgid "``LINK_LIBRARIES <libs>...``"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:57
msgid ""
"Specify libraries to be linked in the generated project. The list of "
"libraries may refer to system libraries and to :ref:`Imported Targets "
"<Imported Targets>` from the calling project."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:61
msgid ""
"If this option is specified, any ``-DLINK_LIBRARIES=...`` value given to "
"the ``CMAKE_FLAGS`` option will be ignored."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:68
msgid "``LINK_OPTIONS <options>...``"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:67
msgid ""
"Specify link step options to pass to :command:`target_link_options` in "
"the generated project."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:73
msgid "``OUTPUT_VARIABLE <var>``"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:71
msgid ""
"Report the compile build output and the output from running the "
"executable in the given variable.  This option exists for legacy reasons."
"  Prefer ``COMPILE_OUTPUT_VARIABLE`` and ``RUN_OUTPUT_VARIABLE`` instead."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:76
msgid "``RUN_OUTPUT_VARIABLE <var>``"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:76
msgid "Report the output from running the executable in a given variable."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:82
msgid "``WORKING_DIRECTORY <var>``"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:81
msgid ""
"Run the executable in the given directory. If no ``WORKING_DIRECTORY`` is"
" specified, the executable will run in ``<bindir>``."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:85
msgid "Other Behavior Settings"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:87
msgid ""
"Set the :variable:`CMAKE_TRY_COMPILE_CONFIGURATION` variable to choose a "
"build configuration."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:91
msgid "Behavior when Cross Compiling"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:93
msgid ""
"Use ``CMAKE_CROSSCOMPILING_EMULATOR`` when running cross-compiled "
"binaries."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:97
msgid ""
"When cross compiling, the executable compiled in the first step usually "
"cannot be run on the build host.  The ``try_run`` command checks the "
":variable:`CMAKE_CROSSCOMPILING` variable to detect whether CMake is in "
"cross-compiling mode.  If that is the case, it will still try to compile "
"the executable, but it will not try to run the executable unless the "
":variable:`CMAKE_CROSSCOMPILING_EMULATOR` variable is set.  Instead it "
"will create cache variables which must be filled by the user or by "
"presetting them in some CMake script file to the values the executable "
"would have produced if it had been run on its actual target platform. "
"These cache entries are:"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:109
msgid "``<runResultVar>``"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:109
msgid "Exit code if the executable were to be run on the target platform."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:114
msgid "``<runResultVar>__TRYRUN_OUTPUT``"
msgstr ""

#: ../../CMake/Help/command/try_run.rst:112
msgid ""
"Output from stdout and stderr if the executable were to be run on the "
"target platform.  This is created only if the ``RUN_OUTPUT_VARIABLE`` or "
"``OUTPUT_VARIABLE`` option was used."
msgstr ""

#: ../../CMake/Help/command/try_run.rst:116
msgid ""
"In order to make cross compiling your project easier, use ``try_run`` "
"only if really required.  If you use ``try_run``, use the "
"``RUN_OUTPUT_VARIABLE`` or ``OUTPUT_VARIABLE`` options only if really "
"required.  Using them will require that when cross-compiling, the cache "
"variables will have to be set manually to the output of the executable. "
"You can also \"guard\" the calls to ``try_run`` with an :command:`if` "
"block checking the :variable:`CMAKE_CROSSCOMPILING` variable and provide "
"an easy-to-preset alternative for this case."
msgstr ""

