# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.20.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-19 02:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:4
msgid "cmake-toolchains(7)"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:7
msgid "Contents"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:11
msgid "Introduction"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:13
msgid ""
"CMake uses a toolchain of utilities to compile, link libraries and create"
" archives, and other tasks to drive the build. The toolchain utilities "
"available are determined by the languages enabled. In normal builds, "
"CMake automatically determines the toolchain for host builds based on "
"system introspection and defaults. In cross-compiling scenarios, a "
"toolchain file may be specified with information about compiler and "
"utility paths."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:21
msgid "Languages"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:23
msgid ""
"Languages are enabled by the :command:`project` command.  Language-"
"specific built-in variables, such as :variable:`CMAKE_CXX_COMPILER "
"<CMAKE_<LANG>_COMPILER>`, :variable:`CMAKE_CXX_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` etc are set by invoking the "
":command:`project` command.  If no project command is in the top-level "
"CMakeLists file, one will be implicitly generated. By default the enabled"
" languages are ``C`` and ``CXX``:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:35
msgid ""
"A special value of ``NONE`` can also be used with the :command:`project` "
"command to enable no languages:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:42
msgid ""
"The :command:`enable_language` command can be used to enable languages "
"after the :command:`project` command:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:49
msgid ""
"When a language is enabled, CMake finds a compiler for that language, and"
" determines some information, such as the vendor and version of the "
"compiler, the target architecture and bitwidth, the location of "
"corresponding utilities etc."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:54
msgid ""
"The :prop_gbl:`ENABLED_LANGUAGES` global property contains the languages "
"which are currently enabled."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:58
msgid "Variables and Properties"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:60
msgid ""
"Several variables relate to the language components of a toolchain which "
"are enabled. :variable:`CMAKE_<LANG>_COMPILER` is the full path to the "
"compiler used for ``<LANG>``. :variable:`CMAKE_<LANG>_COMPILER_ID` is the"
" identifier used by CMake for the compiler and "
":variable:`CMAKE_<LANG>_COMPILER_VERSION` is the version of the compiler."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:66
msgid ""
"The :variable:`CMAKE_<LANG>_FLAGS` variables and the configuration-"
"specific equivalents contain flags that will be added to the compile "
"command when compiling a file of a particular language."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:70
msgid ""
"As the linker is invoked by the compiler driver, CMake needs a way to "
"determine which compiler to use to invoke the linker. This is calculated "
"by the :prop_sf:`LANGUAGE` of source files in the target, and in the case"
" of static libraries, the language of the dependent libraries. The choice"
" CMake makes may be overridden with the :prop_tgt:`LINKER_LANGUAGE` "
"target property."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:77
msgid "Toolchain Features"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:79
msgid ""
"CMake provides the :command:`try_compile` command and wrapper macros such"
" as :module:`CheckCXXSourceCompiles`, :module:`CheckCXXSymbolExists` and "
":module:`CheckIncludeFile` to test capability and availability of various"
" toolchain features. These APIs test the toolchain in some way and cache "
"the result so that the test does not have to be performed again the next "
"time CMake runs."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:86
msgid ""
"Some toolchain features have built-in handling in CMake, and do not "
"require compile-tests. For example, :prop_tgt:`POSITION_INDEPENDENT_CODE`"
" allows specifying that a target should be built as position-independent "
"code, if the compiler supports that feature. The "
":prop_tgt:`<LANG>_VISIBILITY_PRESET` and "
":prop_tgt:`VISIBILITY_INLINES_HIDDEN` target properties add flags for "
"hidden visibility, if supported by the compiler."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:96
msgid "Cross Compiling"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:98
msgid ""
"If :manual:`cmake(1)` is invoked with the command line parameter "
"``-DCMAKE_TOOLCHAIN_FILE=path/to/file``, the file will be loaded early to"
" set values for the compilers. The :variable:`CMAKE_CROSSCOMPILING` "
"variable is set to true when CMake is cross-compiling."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:104
msgid ""
"Note that using the :variable:`CMAKE_SOURCE_DIR` or "
":variable:`CMAKE_BINARY_DIR` variables inside a toolchain file is "
"typically undesirable.  The toolchain file is used in contexts where "
"these variables have different values when used in different places (e.g."
" as part of a call to :command:`try_compile`).  In most cases, where "
"there is a need to evaluate paths inside a toolchain file, the more "
"appropriate variable to use would be :variable:`CMAKE_CURRENT_LIST_DIR`, "
"since it always has an unambiguous, predictable value."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:113
msgid "Cross Compiling for Linux"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:115
msgid "A typical cross-compiling toolchain for Linux has content such as:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:135
msgid ""
"The :variable:`CMAKE_SYSTEM_NAME` is the CMake-identifier of the target "
"platform to build for."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:138
msgid ""
"The :variable:`CMAKE_SYSTEM_PROCESSOR` is the CMake-identifier of the "
"target architecture to build for."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:141
msgid ""
"The :variable:`CMAKE_SYSROOT` is optional, and may be specified if a "
"sysroot is available."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:144
msgid ""
"The :variable:`CMAKE_STAGING_PREFIX` is also optional. It may be used to "
"specify a path on the host to install to. The "
":variable:`CMAKE_INSTALL_PREFIX` is always the runtime installation "
"location, even when cross-compiling."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:148
msgid ""
"The :variable:`CMAKE_<LANG>_COMPILER` variables may be set to full paths,"
" or to names of compilers to search for in standard locations.   For "
"toolchains that do not support linking binaries without custom flags or "
"scripts one may set the :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` "
"variable to ``STATIC_LIBRARY`` to tell CMake not to try to link "
"executables during its checks."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:154
msgid ""
"CMake ``find_*`` commands will look in the sysroot, and the "
":variable:`CMAKE_FIND_ROOT_PATH` entries by default in all cases, as well"
" as looking in the host system root prefix. Although this can be "
"controlled on a case-by-case basis, when cross-compiling, it can be "
"useful to exclude looking in either the host or the target for particular"
" artifacts. Generally, includes, libraries and packages should be found "
"in the target system prefixes, whereas executables which must be run as "
"part of the build should be found only on the host and not on the target."
" This is the purpose of the ``CMAKE_FIND_ROOT_PATH_MODE_*`` variables."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:166
msgid "Cross Compiling for the Cray Linux Environment"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:168
msgid ""
"Cross compiling for compute nodes in the Cray Linux Environment can be "
"done without needing a separate toolchain file.  Specifying "
"``-DCMAKE_SYSTEM_NAME=CrayLinuxEnvironment`` on the CMake command line "
"will ensure that the appropriate build settings and search paths are "
"configured. The platform will pull its configuration from the current "
"environment variables and will configure a project to use the compiler "
"wrappers from the Cray Programming Environment's ``PrgEnv-*`` modules if "
"present and loaded."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:176
msgid ""
"The default configuration of the Cray Programming Environment is to only "
"support static libraries.  This can be overridden and shared libraries "
"enabled by setting the ``CRAYPE_LINK_TYPE`` environment variable to "
"``dynamic``."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:181
msgid ""
"Running CMake without specifying :variable:`CMAKE_SYSTEM_NAME` will run "
"the configure step in host mode assuming a standard Linux environment. If"
" not overridden, the ``PrgEnv-*`` compiler wrappers will end up getting "
"used, which if targeting the either the login node or compute node, is "
"likely not the desired behavior.  The exception to this would be if you "
"are building directly on a NID instead of cross-compiling from a login "
"node. If trying to build software for a login node, you will need to "
"either first unload the currently loaded ``PrgEnv-*`` module or "
"explicitly tell CMake to use the system compilers in ``/usr/bin`` instead"
" of the Cray wrappers.  If instead targeting a compute node is desired, "
"just specify the :variable:`CMAKE_SYSTEM_NAME` as mentioned above."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:194
msgid "Cross Compiling using Clang"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:196
msgid ""
"Some compilers such as Clang are inherently cross compilers. The "
":variable:`CMAKE_<LANG>_COMPILER_TARGET` can be set to pass a value to "
"those supported compilers when compiling:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:212
msgid ""
"Similarly, some compilers do not ship their own supplementary utilities "
"such as linkers, but provide a way to specify the location of the "
"external toolchain which will be used by the compiler driver. The "
":variable:`CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN` variable can be set "
"in a toolchain file to pass the path to the compiler driver."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:219
msgid "Cross Compiling for QNX"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:221
msgid ""
"As the Clang compiler the QNX QCC compile is inherently a cross compiler."
" And the :variable:`CMAKE_<LANG>_COMPILER_TARGET` can be set to pass a "
"value to those supported compilers when compiling:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:240
msgid "Cross Compiling for Windows CE"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:242
msgid ""
"Cross compiling for Windows CE requires the corresponding SDK being "
"installed on your system.  These SDKs are usually installed under "
"``C:/Program Files (x86)/Windows CE Tools/SDKs``."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:246
msgid ""
"A toolchain file to configure a Visual Studio generator for Windows CE "
"may look like this:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:259
msgid ""
"The :variable:`CMAKE_GENERATOR_PLATFORM` tells the generator which SDK to"
" use. Further :variable:`CMAKE_SYSTEM_VERSION` tells the generator what "
"version of Windows CE to use.  Currently version 8.0 (Windows Embedded "
"Compact 2013) is supported out of the box.  Other versions may require "
"one to set :variable:`CMAKE_GENERATOR_TOOLSET` to the correct value."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:266
msgid "Cross Compiling for Windows 10 Universal Applications"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:268
msgid ""
"A toolchain file to configure a Visual Studio generator for a Windows 10 "
"Universal Application may look like this:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:276
msgid ""
"A Windows 10 Universal Application targets both Windows Store and Windows"
" Phone.  Specify the :variable:`CMAKE_SYSTEM_VERSION` variable to be "
"``10.0`` to build with the latest available Windows 10 SDK. Specify a "
"more specific version (e.g. ``10.0.10240.0`` for RTM) to build with the "
"corresponding SDK."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:283
msgid "Cross Compiling for Windows Phone"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:285
msgid ""
"A toolchain file to configure a Visual Studio generator for Windows Phone"
" may look like this:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:294
msgid "Cross Compiling for Windows Store"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:296
msgid ""
"A toolchain file to configure a Visual Studio generator for Windows Store"
" may look like this:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:307
msgid "Cross Compiling for Android"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:309
msgid ""
"A toolchain file may configure cross-compiling for Android by setting the"
" :variable:`CMAKE_SYSTEM_NAME` variable to ``Android``.  Further "
"configuration is specific to the Android development environment to be "
"used."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:313
msgid ""
"For :ref:`Visual Studio Generators`, CMake expects :ref:`NVIDIA Nsight "
"Tegra Visual Studio Edition <Cross Compiling for Android with NVIDIA "
"Nsight Tegra Visual Studio Edition>` or the :ref:`Visual Studio tools for"
" Android <Cross Compiling for Android with the NDK>` to be installed. See"
" those sections for further configuration details."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:319
msgid ""
"For :ref:`Makefile Generators` and the :generator:`Ninja` generator, "
"CMake expects one of these environments:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:322
msgid ":ref:`NDK <Cross Compiling for Android with the NDK>`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:323
msgid ""
":ref:`Standalone Toolchain <Cross Compiling for Android with a Standalone"
" Toolchain>`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:325
msgid "CMake uses the following steps to select one of the environments:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:327
msgid ""
"If the :variable:`CMAKE_ANDROID_NDK` variable is set, the NDK at the "
"specified location will be used."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:330
msgid ""
"Else, if the :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN` variable is "
"set, the Standalone Toolchain at the specified location will be used."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:333
msgid ""
"Else, if the :variable:`CMAKE_SYSROOT` variable is set to a directory of "
"the form ``<ndk>/platforms/android-<api>/arch-<arch>``, the ``<ndk>`` "
"part will be used as the value of :variable:`CMAKE_ANDROID_NDK` and the "
"NDK will be used."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:338
msgid ""
"Else, if the :variable:`CMAKE_SYSROOT` variable is set to a directory of "
"the form ``<standalone-toolchain>/sysroot``, the ``<standalone-"
"toolchain>`` part will be used as the value of "
":variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN` and the Standalone "
"Toolchain will be used."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:343
msgid ""
"Else, if a cmake variable ``ANDROID_NDK`` is set it will be used as the "
"value of :variable:`CMAKE_ANDROID_NDK`, and the NDK will be used."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:346
msgid ""
"Else, if a cmake variable ``ANDROID_STANDALONE_TOOLCHAIN`` is set, it "
"will be used as the value of "
":variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`, and the Standalone "
"Toolchain will be used."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:350
msgid ""
"Else, if an environment variable ``ANDROID_NDK_ROOT`` or ``ANDROID_NDK`` "
"is set, it will be used as the value of :variable:`CMAKE_ANDROID_NDK`, "
"and the NDK will be used."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:354
msgid ""
"Else, if an environment variable ``ANDROID_STANDALONE_TOOLCHAIN`` is set "
"then it will be used as the value of "
":variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`, and the Standalone "
"Toolchain will be used."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:359
msgid ""
"Else, an error diagnostic will be issued that neither the NDK or "
"Standalone Toolchain can be found."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:362
msgid ""
"If an Android NDK is selected, its version number is reported in the "
":variable:`CMAKE_ANDROID_NDK_VERSION` variable."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:369
msgid "Cross Compiling for Android with the NDK"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:371
msgid ""
"A toolchain file may configure :ref:`Makefile Generators`, :ref:`Ninja "
"Generators`, or :ref:`Visual Studio Generators` to target Android for "
"cross-compiling."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:375
msgid "Configure use of an Android NDK with the following variables:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:379
#: ../../CMake/Help/manual/cmake-toolchains.7.rst:463
msgid ":variable:`CMAKE_SYSTEM_NAME`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:378
#: ../../CMake/Help/manual/cmake-toolchains.7.rst:462
msgid ""
"Set to ``Android``.  Must be specified to enable cross compiling for "
"Android."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:389
#: ../../CMake/Help/manual/cmake-toolchains.7.rst:484
msgid ":variable:`CMAKE_SYSTEM_VERSION`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:382
msgid ""
"Set to the Android API level.  If not specified, the value is determined "
"as follows:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:385
msgid ""
"If the :variable:`CMAKE_ANDROID_API` variable is set, its value is used "
"as the API level."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:387
msgid ""
"If the :variable:`CMAKE_SYSROOT` variable is set, the API level is "
"detected from the NDK directory structure containing the sysroot."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:389
msgid "Otherwise, the latest API level available in the NDK is used."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:398
#: ../../CMake/Help/manual/cmake-toolchains.7.rst:487
msgid ":variable:`CMAKE_ANDROID_ARCH_ABI`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:392
msgid ""
"Set to the Android ABI (architecture).  If not specified, this variable "
"will default to the first supported ABI in the list of ``armeabi``, "
"``armeabi-v7a`` and ``arm64-v8a``. The :variable:`CMAKE_ANDROID_ARCH` "
"variable will be computed from ``CMAKE_ANDROID_ARCH_ABI`` automatically. "
"Also see the :variable:`CMAKE_ANDROID_ARM_MODE` and "
":variable:`CMAKE_ANDROID_ARM_NEON` variables."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:403
msgid ":variable:`CMAKE_ANDROID_NDK`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:401
msgid ""
"Set to the absolute path to the Android NDK root directory. If not "
"specified, a default for this variable will be chosen as specified "
":ref:`above <Cross Compiling for Android>`."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:408
msgid ":variable:`CMAKE_ANDROID_NDK_DEPRECATED_HEADERS`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:406
msgid ""
"Set to a true value to use the deprecated per-api-level headers instead "
"of the unified headers.  If not specified, the default will be false "
"unless using a NDK that does not provide unified headers."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:414
msgid ":variable:`CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:411
msgid ""
"On NDK r19 or above, this variable must be unset or set to ``clang``. On "
"NDK r18 or below, set this to the version of the NDK toolchain to be "
"selected as the compiler.  If not specified, the default will be the "
"latest available GCC toolchain."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:418
msgid ":variable:`CMAKE_ANDROID_STL_TYPE`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:417
msgid ""
"Set to specify which C++ standard library to use.  If not specified, a "
"default will be selected as described in the variable documentation."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:420
#: ../../CMake/Help/manual/cmake-toolchains.7.rst:481
msgid "The following variables will be computed and provided automatically:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:423
#: ../../CMake/Help/manual/cmake-toolchains.7.rst:490
msgid ":variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:423
msgid "The absolute path prefix to the binutils in the NDK toolchain."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:427
#: ../../CMake/Help/manual/cmake-toolchains.7.rst:493
msgid ":variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:426
msgid "The host platform suffix of the binutils in the NDK toolchain."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:429
#: ../../CMake/Help/manual/cmake-toolchains.7.rst:495
msgid "For example, a toolchain file might contain:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:439
#: ../../CMake/Help/manual/cmake-toolchains.7.rst:502
msgid "Alternatively one may specify the values without a toolchain file:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:453
msgid "Cross Compiling for Android with a Standalone Toolchain"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:455
msgid ""
"A toolchain file may configure :ref:`Makefile Generators` or the "
":generator:`Ninja` generator to target Android for cross-compiling using "
"a standalone toolchain."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:459
msgid ""
"Configure use of an Android standalone toolchain with the following "
"variables:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:470
msgid ":variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:466
msgid ""
"Set to the absolute path to the standalone toolchain root directory. A "
"``${CMAKE_ANDROID_STANDALONE_TOOLCHAIN}/sysroot`` directory must exist. "
"If not specified, a default for this variable will be chosen as specified"
" :ref:`above <Cross Compiling for Android>`."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:475
msgid ":variable:`CMAKE_ANDROID_ARM_MODE`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:473
msgid ""
"When the standalone toolchain targets ARM, optionally set this to ``ON`` "
"to target 32-bit ARM instead of 16-bit Thumb. See variable documentation "
"for details."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:479
msgid ":variable:`CMAKE_ANDROID_ARM_NEON`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:478
msgid ""
"When the standalone toolchain targets ARM v7, optionally set thisto "
"``ON`` to target ARM NEON devices.  See variable documentation for "
"details."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:484
msgid "The Android API level detected from the standalone toolchain."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:487
msgid "The Android ABI detected from the standalone toolchain."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:490
msgid "The absolute path prefix to the ``binutils`` in the standalone toolchain."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:493
msgid "The host platform suffix of the ``binutils`` in the standalone toolchain."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:513
msgid "Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:515
msgid ""
"A toolchain file to configure one of the :ref:`Visual Studio Generators` "
"to build using NVIDIA Nsight Tegra targeting Android may look like this:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:522
msgid ""
"The :variable:`CMAKE_GENERATOR_TOOLSET` may be set to select the Nsight "
"Tegra \"Toolchain Version\" value."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:525
msgid "See also target properties:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:527
msgid ":prop_tgt:`ANDROID_ANT_ADDITIONAL_OPTIONS`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:528
msgid ":prop_tgt:`ANDROID_API_MIN`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:529
msgid ":prop_tgt:`ANDROID_API`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:530
msgid ":prop_tgt:`ANDROID_ARCH`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:531
msgid ":prop_tgt:`ANDROID_ASSETS_DIRECTORIES`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:532
msgid ":prop_tgt:`ANDROID_GUI`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:533
msgid ":prop_tgt:`ANDROID_JAR_DEPENDENCIES`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:534
msgid ":prop_tgt:`ANDROID_JAR_DIRECTORIES`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:535
msgid ":prop_tgt:`ANDROID_JAVA_SOURCE_DIR`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:536
msgid ":prop_tgt:`ANDROID_NATIVE_LIB_DEPENDENCIES`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:537
msgid ":prop_tgt:`ANDROID_NATIVE_LIB_DIRECTORIES`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:538
msgid ":prop_tgt:`ANDROID_PROCESS_MAX`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:539
msgid ":prop_tgt:`ANDROID_PROGUARD_CONFIG_PATH`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:540
msgid ":prop_tgt:`ANDROID_PROGUARD`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:541
msgid ":prop_tgt:`ANDROID_SECURE_PROPS_PATH`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:542
msgid ":prop_tgt:`ANDROID_SKIP_ANT_STEP`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:543
msgid ":prop_tgt:`ANDROID_STL_TYPE`"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:548
msgid "Cross Compiling for iOS, tvOS, or watchOS"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:550
msgid ""
"For cross-compiling to iOS, tvOS, or watchOS, the :generator:`Xcode` "
"generator is recommended.  The :generator:`Unix Makefiles` or "
":generator:`Ninja` generators can also be used, but they require the "
"project to handle more areas like target CPU selection and code signing."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:555
msgid ""
"Any of the three systems can be targeted by setting the "
":variable:`CMAKE_SYSTEM_NAME` variable to a value from the table below. "
"By default, the latest Device SDK is chosen.  As for all Apple platforms,"
" a different SDK (e.g. a simulator) can be selected by setting the "
":variable:`CMAKE_OSX_SYSROOT` variable, although this should rarely be "
"necessary (see :ref:`Switching Between Device and Simulator` below). A "
"list of available SDKs can be obtained by running ``xcodebuild "
"-showsdks``."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:564
msgid "OS"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:564
msgid "CMAKE_SYSTEM_NAME"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:564
msgid "Device SDK (default)"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:564
msgid "Simulator SDK"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:566
msgid "iOS"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:566
msgid "iphoneos"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:566
msgid "iphonesimulator"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:567
msgid "tvOS"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:567
msgid "appletvos"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:567
msgid "appletvsimulator"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:568
msgid "watchOS"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:568
msgid "watchos"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:568
msgid "watchsimulator"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:571
msgid ""
"For example, to create a CMake configuration for iOS, the following "
"command is sufficient:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:578
msgid ""
"Variable :variable:`CMAKE_OSX_ARCHITECTURES` can be used to set "
"architectures for both device and simulator. Variable "
":variable:`CMAKE_OSX_DEPLOYMENT_TARGET` can be used to set an "
"iOS/tvOS/watchOS deployment target."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:582
msgid ""
"Next configuration will install fat 5 architectures iOS library and add "
"the ``-miphoneos-version-min=9.3``/``-mios-simulator-version-min=9.3`` "
"flags to the compiler:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:596
msgid "Example:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:606
msgid "Install:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:612
msgid "Check library:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:627
msgid "Code Signing"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:629
msgid ""
"Some build artifacts for the embedded Apple platforms require mandatory "
"code signing.  If the :generator:`Xcode` generator is being used and code"
" signing is required or desired, the development team ID can be specified"
" via the ``CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM`` CMake variable. This "
"team ID will then be included in the generated Xcode project. By default,"
" CMake avoids the need for code signing during the internal configuration"
" phase (i.e compiler ID and feature detection)."
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:640
msgid "Switching Between Device and Simulator"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:642
msgid ""
"When configuring for any of the embedded platforms, one can target either"
" real devices or the simulator.  Both have their own separate SDK, but "
"CMake only supports specifying a single SDK for the configuration phase."
"  This means the developer must select one or the other at configuration "
"time. When using the :generator:`Xcode` generator, this is less of a "
"limitation because Xcode still allows you to build for either a device or"
" a simulator, even though configuration was only performed for one of the"
" two.  From within the Xcode IDE, builds are performed for the selected "
"\"destination\" platform.  When building from the command line, the "
"desired sdk can be specified directly by passing a ``-sdk`` option to the"
" underlying build tool (``xcodebuild``).  For example:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:658
msgid ""
"Please note that checks made during configuration were performed against "
"the configure-time SDK and might not hold true for other SDKs.  Commands "
"like :command:`find_package`, :command:`find_library`, etc. store and use"
" details only for the configured SDK/platform, so they can be problematic"
" if wanting to switch between device and simulator builds. You can follow"
" the next rules to make device + simulator configuration work:"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:665
msgid ""
"Use explicit ``-l`` linker flag, e.g. ``target_link_libraries(foo PUBLIC "
"\"-lz\")``"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:668
msgid ""
"Use explicit ``-framework`` linker flag, e.g. ``target_link_libraries(foo"
" PUBLIC \"-framework CoreFoundation\")``"
msgstr ""

#: ../../CMake/Help/manual/cmake-toolchains.7.rst:671
msgid ""
"Use :command:`find_package` only for libraries installed with "
":variable:`CMAKE_IOS_INSTALL_COMBINED` feature"
msgstr ""

