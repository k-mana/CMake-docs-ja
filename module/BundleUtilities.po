# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.20.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-19 02:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../CMake/Modules/BundleUtilities.cmake:6
msgid "BundleUtilities"
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:8
msgid "Functions to help assemble a standalone bundle application."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:10
msgid ""
"A collection of CMake utility functions useful for dealing with ``.app`` "
"bundles on the Mac and bundle-like directories on any OS."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:13
msgid "The following functions are provided by this module:"
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:35
msgid ""
"Requires CMake 2.6 or greater because it uses function, break and "
"``PARENT_SCOPE``.  Also depends on ``GetPrerequisites.cmake``."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:38
msgid ""
"DO NOT USE THESE FUNCTIONS AT CONFIGURE TIME (from ``CMakeLists.txt``)! "
"Instead, invoke them from an :command:`install(CODE)` or "
":command:`install(SCRIPT)` rule."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:46
msgid ""
"Fix up ``<app>`` bundle in-place and make it standalone, such that it can"
" be drag-n-drop copied to another machine and run on that machine as long"
" as all of the system libraries are compatible."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:50
msgid ""
"If you pass plugins to ``fixup_bundle`` as the libs parameter, you should"
" install them or copy them into the bundle before calling "
"``fixup_bundle``. The ``<libs>`` parameter is a list of libraries that "
"must be fixed up, but that cannot be determined by ``otool`` output "
"analysis  (i.e. ``plugins``)."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:55
msgid ""
"Gather all the keys for all the executables and libraries in a bundle, "
"and then, for each key, copy each prerequisite into the bundle.  Then fix"
" each one up according to its own list of prerequisites."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:59
msgid ""
"Then clear all the keys and call ``verify_app`` on the final bundle to "
"ensure that it is truly standalone."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:62
msgid ""
"As an optional parameter (``IGNORE_ITEM``) a list of file names can be "
"passed, which are then ignored (e.g. ``IGNORE_ITEM "
"\"vcredist_x86.exe;vcredist_x64.exe\"``)."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:71
msgid ""
"Makes a copy of the bundle ``<src>`` at location ``<dst>`` and then fixes"
" up the new copied bundle in-place at ``<dst>``."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:78
msgid ""
"Verifies that an application ``<app>`` appears valid based on running "
"analysis tools on it.  Calls :command:`message(FATAL_ERROR)` if the "
"application is not verified."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:82
#: ../../CMake/Modules/BundleUtilities.cmake:160
#: ../../CMake/Modules/BundleUtilities.cmake:221
msgid ""
"As an optional parameter (``IGNORE_ITEM``) a list of file names can be "
"passed, which are then ignored (e.g. ``IGNORE_ITEM "
"\"vcredist_x86.exe;vcredist_x64.exe\"``)"
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:91
msgid ""
"The result will be the full path name of the bundle's main executable "
"file or an ``error:`` prefixed string if it could not be determined."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:98
msgid ""
"Returns the nearest parent dir whose name ends with ``.app`` given the "
"full path to an executable.  If there is no such parent dir, then simply "
"return the dir containing the executable."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:102
msgid "The returned directory may or may not exist."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:108
msgid ""
"Takes either a ``.app`` directory name or the name of an executable "
"nested inside a ``.app`` directory and returns the path to the ``.app`` "
"directory in ``<bundle_var>`` and the path to its main executable in "
"``<executable_var>``."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:117
msgid ""
"Scans ``<bundle>`` bundle recursively for all ``<exes_var>`` executable "
"files and accumulates them into a variable."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:124
msgid ""
"Given ``<item>`` file name, generate ``<key_var>`` key that should be "
"unique considering the set of libraries that need copying or fixing up to"
" make a bundle standalone.  This is essentially the file name including "
"extension with ``.`` replaced by ``_``"
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:129
msgid ""
"This key is used as a prefix for CMake variables so that we can associate"
" a set of variables with a given item based on its key."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:136
msgid ""
"Loop over the ``<keys_var>`` list of keys, clearing all the variables "
"associated with each key.  After the loop, clear the list of keys itself."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:139
msgid ""
"Caller of ``get_bundle_keys`` should call ``clear_bundle_keys`` when done"
" with list of keys."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:147
msgid ""
"Add ``<keys_var>`` key to the list (if necessary) for the given item. If "
"added, also set all the variables associated with that key."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:154
msgid ""
"Loop over all the executable and library files within ``<app>`` bundle "
"(and given as extra ``<libs>``) and accumulate a list of keys "
"representing them.  Set values associated with each key such that we can "
"loop over all of them and copy prerequisite libs into the bundle and then"
" do appropriate ``install_name_tool`` fixups."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:169
msgid ""
"Copy a resolved item into the bundle if necessary. Copy is not necessary,"
" if the ``<resolved_item>`` is \"the same as\" the "
"``<resolved_embedded_item>``."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:177
msgid ""
"Copy a resolved framework into the bundle if necessary. Copy is not "
"necessary, if the ``<resolved_item>`` is \"the same as\" the "
"``<resolved_embedded_item>``."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:181
msgid ""
"By default, ``BU_COPY_FULL_FRAMEWORK_CONTENTS`` is not set.  If you want "
"full frameworks embedded in your bundles, set "
"``BU_COPY_FULL_FRAMEWORK_CONTENTS`` to ``ON`` before calling "
"fixup_bundle.  By default, ``COPY_RESOLVED_FRAMEWORK_INTO_BUNDLE`` copies"
" the framework dylib itself plus the framework ``Resources`` directory."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:191
msgid ""
"Get the direct/non-system prerequisites of the "
"``<resolved_embedded_item>``. For each prerequisite, change the way it is"
" referenced to the value of the ``_EMBEDDED_ITEM`` keyed variable for "
"that prerequisite.  (Most likely changing to an ``@executable_path`` "
"style reference.)"
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:196
msgid ""
"This function requires that the ``<resolved_embedded_item>`` be "
"``inside`` the bundle already.  In other words, if you pass plugins to "
"``fixup_bundle`` as the libs parameter, you should install them or copy "
"them into the bundle before calling ``fixup_bundle``.  The ``libs`` "
"parameter is a list of libraries that must be fixed up, but that cannot "
"be determined by otool output analysis.  (i.e., ``plugins``)"
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:203
msgid ""
"Also, change the id of the item being fixed up to its own "
"``_EMBEDDED_ITEM`` value."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:206
msgid ""
"Accumulate changes in a local variable and make *one* call to "
"``install_name_tool`` at the end of the function with all the changes at "
"once."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:210
msgid ""
"If the ``BU_CHMOD_BUNDLE_ITEMS`` variable is set then bundle items will "
"be marked writable before ``install_name_tool`` tries to change them."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:217
msgid ""
"Verifies that the sum of all prerequisites of all files inside the bundle"
" are contained within the bundle or are ``system`` libraries, presumed to"
" exist everywhere."
msgstr ""

#: ../../CMake/Modules/BundleUtilities.cmake:230
msgid ""
"Verifies that any symlinks found in the ``<bundle>`` bundle point to "
"other files that are already also in the bundle...  Anything that points "
"to an external file causes this function to fail the verification."
msgstr ""

