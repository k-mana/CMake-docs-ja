# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.20.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-19 02:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../CMake/Modules/CMakeForceCompiler.cmake:6
msgid "CMakeForceCompiler"
msgstr ""

#: ../../CMake/Modules/CMakeForceCompiler.cmake:10
msgid "Do not use."
msgstr ""

#: ../../CMake/Modules/CMakeForceCompiler.cmake:12
msgid ""
"The macros provided by this module were once intended for use by cross-"
"compiling toolchain files when CMake was not able to automatically detect"
" the compiler identification.  Since the introduction of this module, "
"CMake's compiler identification capabilities have improved and can now be"
" taught to recognize any compiler.  Furthermore, the suite of information"
" CMake detects from a compiler is now too extensive to be provided by "
"toolchain files using these macros."
msgstr ""

#: ../../CMake/Modules/CMakeForceCompiler.cmake:20
msgid ""
"One common use case for this module was to skip CMake's checks for a "
"working compiler when using a cross-compiler that cannot link binaries "
"without special flags or custom linker scripts.  This case is now "
"supported by setting the :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` "
"variable in the toolchain file instead."
msgstr ""

#: ../../CMake/Modules/CMakeForceCompiler.cmake:28
msgid "Macro ``CMAKE_FORCE_C_COMPILER`` has the following signature:"
msgstr ""

#: ../../CMake/Modules/CMakeForceCompiler.cmake:34
msgid ""
"It sets :variable:`CMAKE_C_COMPILER <CMAKE_<LANG>_COMPILER>` to the given"
" compiler and the cmake internal variable :variable:`CMAKE_C_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` to the given compiler-id.  It also bypasses "
"the check for working compiler and basic compiler information tests."
msgstr ""

#: ../../CMake/Modules/CMakeForceCompiler.cmake:40
msgid "Macro ``CMAKE_FORCE_CXX_COMPILER`` has the following signature:"
msgstr ""

#: ../../CMake/Modules/CMakeForceCompiler.cmake:46
msgid ""
"It sets :variable:`CMAKE_CXX_COMPILER <CMAKE_<LANG>_COMPILER>` to the "
"given compiler and the cmake internal variable "
":variable:`CMAKE_CXX_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` to the given"
" compiler-id.  It also bypasses the check for working compiler and basic "
"compiler information tests."
msgstr ""

#: ../../CMake/Modules/CMakeForceCompiler.cmake:52
msgid "Macro ``CMAKE_FORCE_Fortran_COMPILER`` has the following signature:"
msgstr ""

#: ../../CMake/Modules/CMakeForceCompiler.cmake:58
msgid ""
"It sets :variable:`CMAKE_Fortran_COMPILER <CMAKE_<LANG>_COMPILER>` to the"
" given compiler and the cmake internal variable "
":variable:`CMAKE_Fortran_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` to the "
"given compiler-id.  It also bypasses the check for working compiler and "
"basic compiler information tests."
msgstr ""

#: ../../CMake/Modules/CMakeForceCompiler.cmake:64
msgid "So a simple toolchain file could look like this:"
msgstr ""

