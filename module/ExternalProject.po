# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.20.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-19 02:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../CMake/Modules/ExternalProject.cmake:8
msgid "ExternalProject"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:11
msgid "Contents"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:15
msgid "Commands"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:18
msgid "External Project Definition"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:22
msgid ""
"The ``ExternalProject_Add()`` function creates a custom target to drive "
"download, update/patch, configure, build, install and test steps of an "
"external project:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:30
msgid ""
"The individual steps within the process can be driven independently if "
"required (e.g. for CDash submission) and extra custom steps can be "
"defined, along with the ability to control the step dependencies. The "
"directory structure used for the management of the external project can "
"also be customized. The function supports a large number of options which"
" can be used to tailor the external project behavior."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:122
msgid "**Directory Options:**"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:38
msgid ""
"Most of the time, the default directory layout is sufficient. It is "
"largely an implementation detail that the main project usually doesn't "
"need to change. In some circumstances, however, control over the "
"directory layout can be useful or necessary. The directory options are "
"potentially more useful from the point of view that the main build can "
"use the :command:`ExternalProject_Get_Property` command to retrieve their"
" values, thereby allowing the main project to refer to build artifacts of"
" the external project."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:50
msgid "``PREFIX <dir>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:48
msgid ""
"Root directory for the external project. Unless otherwise noted below, "
"all other directories associated with the external project will be "
"created under here."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:53
msgid "``TMP_DIR <dir>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:53
msgid "Directory in which to store temporary files."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:58
msgid "``STAMP_DIR <dir>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:56
msgid ""
"Directory in which to store the timestamps of each step. Log files from "
"individual steps are also created in here unless overridden by LOG_DIR "
"(see *Logging Options* below)."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:63
msgid "``LOG_DIR <dir>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:63
msgid "Directory in which to store the logs of each step."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:68
msgid "``DOWNLOAD_DIR <dir>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:66
msgid ""
"Directory in which to store downloaded files before unpacking them. This "
"directory is only used by the URL download method, all other download "
"methods use ``SOURCE_DIR`` directly instead."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:83
msgid "``SOURCE_DIR <dir>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:71
msgid ""
"Source directory into which downloaded contents will be unpacked, or for "
"non-URL download methods, the directory in which the repository should be"
" checked out, cloned, etc. If no download method is specified, this must "
"point to an existing directory where the external project has already "
"been unpacked or cloned/checked out."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:78
msgid ""
"If a download method is specified, any existing contents of the source "
"directory may be deleted. Only the URL download method checks whether "
"this directory is either missing or empty before initiating the download,"
" stopping with an error if it is not empty. All other download methods "
"silently discard any previous contents of the source directory."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:87
msgid "``BINARY_DIR <dir>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:86
msgid ""
"Specify the build directory location. This option is ignored if "
"``BUILD_IN_SOURCE`` is enabled."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:93
msgid "``INSTALL_DIR <dir>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:90
msgid ""
"Installation prefix to be placed in the ``<INSTALL_DIR>`` placeholder. "
"This does not actually configure the external project to install to the "
"given prefix. That must be done by passing appropriate arguments to the "
"external project configuration step, e.g. using ``<INSTALL_DIR>``."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:95
msgid ""
"If any of the above ``..._DIR`` options are not specified, their defaults"
" are computed as follows. If the ``PREFIX`` option is given or the "
"``EP_PREFIX`` directory property is set, then an external project is "
"built and installed under the specified prefix::"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:108
msgid ""
"Otherwise, if the ``EP_BASE`` directory property is set then components "
"of an external project are stored under the specified base::"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:119
msgid ""
"If no ``PREFIX``, ``EP_PREFIX``, or ``EP_BASE`` is specified, then the "
"default is to set ``PREFIX`` to ``<name>-prefix``. Relative paths are "
"interpreted with respect to :variable:`CMAKE_CURRENT_BINARY_DIR` at the "
"point where ``ExternalProject_Add()`` is called."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:408
msgid "**Download Step Options:**"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:125
msgid ""
"A download method can be omitted if the ``SOURCE_DIR`` option is used to "
"point to an existing non-empty directory. Otherwise, one of the download "
"methods below must be specified (multiple download methods should not be "
"given) or a custom ``DOWNLOAD_COMMAND`` provided."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:135
msgid "``DOWNLOAD_COMMAND <cmd>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:131
msgid ""
"Overrides the command used for the download step (:manual:`generator "
"expressions <cmake-generator-expressions(7)>` are supported). If this "
"option is specified, all other download options will be ignored. "
"Providing an empty string for ``<cmd>`` effectively disables the download"
" step."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:258
msgid "*URL Download*"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:152
msgid "``URL <url1> [<url2>...]``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:139
msgid ""
"List of paths and/or URL(s) of the external project's source. When more "
"than one URL is given, they are tried in turn until one succeeds. A URL "
"may be an ordinary path in the local file system (in which case it must "
"be the only URL provided) or any downloadable URL supported by the "
":command:`file(DOWNLOAD)` command. A local filesystem path may refer to "
"either an existing directory or to an archive file, whereas a URL is "
"expected to point to a file which can be treated as an archive. When an "
"archive is used, it will be unpacked automatically unless the "
"``DOWNLOAD_NO_EXTRACT`` option is set to prevent it. The archive type is "
"determined by inspecting the actual content rather than using logic based"
" on the file extension."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:151
msgid "Multiple URLs are allowed."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:162
msgid "``URL_HASH <algo>=<hashValue>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:155
msgid ""
"Hash of the archive file to be downloaded. The argument should be of the "
"form ``<algo>=<hashValue>`` where ``algo`` can be any of the hashing "
"algorithms supported by the :command:`file()` command. Specifying this "
"option is strongly recommended for URL downloads, as it ensures the "
"integrity of the downloaded content. It is also used as a check for a "
"previously downloaded file, allowing connection to the remote location to"
" be avoided altogether if the local directory already has a file from an "
"earlier download that matches the specified hash."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:165
msgid "``URL_MD5 <md5>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:165
msgid "Equivalent to ``URL_HASH MD5=<md5>``."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:171
msgid "``DOWNLOAD_NAME <fname>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:168
msgid ""
"File name to use for the downloaded file. If not given, the end of the "
"URL is used to determine the file name. This option is rarely needed, the"
" default name is generally suitable and is not normally used outside of "
"code internal to the ``ExternalProject`` module."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:182
msgid "``DOWNLOAD_NO_EXTRACT <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:176
msgid ""
"Allows the extraction part of the download step to be disabled by passing"
" a boolean true value for this option. If this option is not given, the "
"downloaded contents will be unpacked automatically if required. If "
"extraction has been disabled, the full path to the downloaded file is "
"available as ``<DOWNLOADED_FILE>`` in subsequent steps or as the property"
" ``DOWNLOADED_FILE`` with the :command:`ExternalProject_Get_Property` "
"command."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:186
msgid "``DOWNLOAD_NO_PROGRESS <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:185
msgid ""
"Can be used to disable logging the download progress. If this option is "
"not given, download progress messages will be logged."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:189
msgid "``TIMEOUT <seconds>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:189
msgid "Maximum time allowed for file download operations."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:194
msgid "``INACTIVITY_TIMEOUT <seconds>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:194
msgid "Terminate the operation after a period of inactivity."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:199
msgid "``HTTP_USERNAME <username>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:199
msgid "Username for the download operation if authentication is required."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:204
msgid "``HTTP_PASSWORD <password>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:204
msgid "Password for the download operation if authentication is required."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:210
msgid "``HTTP_HEADER <header1> [<header2>...]``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:209
msgid ""
"Provides an arbitrary list of HTTP headers for the download operation. "
"This can be useful for accessing content in systems like AWS, etc."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:222
msgid "``TLS_VERIFY <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:213
msgid ""
"Specifies whether certificate verification should be performed for https "
"URLs. If this option is not provided, the default behavior is determined "
"by the ``CMAKE_TLS_VERIFY`` variable (see :command:`file(DOWNLOAD)`). If "
"that is also not set, certificate verification will not be performed. In "
"situations where ``URL_HASH`` cannot be provided, this option can be an "
"alternative verification measure."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:221
msgid "This option also applies to ``git clone`` invocations."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:228
msgid "``TLS_CAINFO <file>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:225
msgid ""
"Specify a custom certificate authority file to use if ``TLS_VERIFY`` is "
"enabled. If this option is not specified, the value of the "
"``CMAKE_TLS_CAINFO`` variable will be used instead (see "
":command:`file(DOWNLOAD)`)"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:247
msgid "``NETRC <level>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:233
msgid ""
"Specify whether the ``.netrc`` file is to be used for operation. If this "
"option is not specified, the value of the ``CMAKE_NETRC`` variable will "
"be used instead (see :command:`file(DOWNLOAD)`) Valid levels are:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:239
msgid "``IGNORED``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:239
msgid "The ``.netrc`` file is ignored. This is the default."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:243
msgid "``OPTIONAL``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:242
msgid ""
"The ``.netrc`` file is optional, and information in the URL is preferred."
"  The file will be scanned to find which ever information is not "
"specified in the URL."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:247
msgid "``REQUIRED``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:246
msgid "The ``.netrc`` file is required, and information in the URL is ignored."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:255
msgid "``NETRC_FILE <file>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:252
msgid ""
"Specify an alternative ``.netrc`` file to the one in your home directory "
"if the ``NETRC`` level is ``OPTIONAL`` or ``REQUIRED``. If this option is"
" not specified, the value of the ``CMAKE_NETRC_FILE`` variable will be "
"used instead (see :command:`file(DOWNLOAD)`)"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:257
msgid "Added support for `tbz2`, `.tar.xz`, `.txz`, and `.7z` extensions."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:373
msgid "*Git*"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:261
msgid ""
"NOTE: A git version of 1.6.5 or later is required if this download method"
" is used."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:266
msgid "``GIT_REPOSITORY <url>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:265
msgid ""
"URL of the git repository. Any URL understood by the ``git`` command may "
"be used."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:289
msgid "``GIT_TAG <tag>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:269
msgid ""
"Git branch name, tag or commit hash. Note that branch names and tags "
"should generally be specified as remote names (i.e. ``origin/myBranch`` "
"rather than simply ``myBranch``). This ensures that if the remote end has"
" its tag moved or branch rebased or history rewritten, the local clone "
"will still be updated correctly. In general, however, specifying a commit"
" hash should be preferred for a number of reasons:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:276
msgid ""
"If the local clone already has the commit corresponding to the hash, no "
"``git fetch`` needs to be performed to check for changes each time CMake "
"is re-run. This can result in a significant speed up if many external "
"projects are being used."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:280
msgid ""
"Using a specific git hash ensures that the main project's own history is "
"fully traceable to a specific point in the external project's evolution. "
"If a branch or tag name is used instead, then checking out a specific "
"commit of the main project doesn't necessarily pin the whole build to a "
"specific point in the life of the external project. The lack of such "
"deterministic behavior makes the main project lose traceability and "
"repeatability."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:288
msgid ""
"If ``GIT_SHALLOW`` is enabled then ``GIT_TAG`` works only with branch "
"names and tags.  A commit hash is not allowed."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:293
msgid "``GIT_REMOTE_NAME <name>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:292
msgid ""
"The optional name of the remote. If this option is not specified, it "
"defaults to ``origin``."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:301
msgid "``GIT_SUBMODULES <module>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:296
msgid ""
"Specific git submodules that should also be updated. If this option is "
"not provided, all git submodules will be updated."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:299
msgid ""
"When :policy:`CMP0097` is set to ``NEW``, if this value is set to an "
"empty string then no submodules are initialized or updated."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:308
msgid "``GIT_SUBMODULES_RECURSE <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:306
msgid ""
"Specify whether git submodules (if any) should update recursively by "
"passing the ``--recursive`` flag to ``git submodule update``. If not "
"specified, the default is on."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:316
msgid "``GIT_SHALLOW <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:313
msgid ""
"When this option is enabled, the ``git clone`` operation will be given "
"the ``--depth 1`` option. This performs a shallow clone, which avoids "
"downloading the whole history and instead retrieves just the commit "
"denoted by the ``GIT_TAG`` option."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:327
msgid "``GIT_PROGRESS <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:321
msgid ""
"When enabled, this option instructs the ``git clone`` operation to report"
" its progress by passing it the ``--progress`` option. Without this "
"option, the clone step for large projects may appear to make the build "
"stall, since nothing will be logged until the clone operation finishes. "
"While this option can be used to provide progress to prevent the "
"appearance of the build having stalled, it may also make the build overly"
" noisy if lots of external projects are used."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:335
msgid "``GIT_CONFIG <option1> [<option2>...]``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:332
msgid ""
"Specify a list of config options to pass to ``git clone``. Each option "
"listed will be transformed into its own ``--config <option>`` on the "
"``git clone`` command line, with each option required to be in the form "
"``key=value``."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:373
msgid "``GIT_REMOTE_UPDATE_STRATEGY <strategy>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:340
msgid ""
"When ``GIT_TAG`` refers to a remote branch, this option can be used to "
"specify how the update step behaves.  The ``<strategy>`` must be one of "
"the following:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:346
msgid "``CHECKOUT``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:345
msgid ""
"Ignore the local branch and always checkout the branch specified by "
"``GIT_TAG``."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:355
msgid "``REBASE``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:349
msgid ""
"Try to rebase the current branch to the one specified by ``GIT_TAG``. If "
"there are local uncommitted changes, they will be stashed first and "
"popped again after rebasing.  If rebasing or popping stashed changes "
"fail, abort the rebase and halt with an error. When "
"``GIT_REMOTE_UPDATE_STRATEGY`` is not present, this is the default "
"strategy unless the default has been overridden with "
"``CMAKE_EP_GIT_REMOTE_UPDATE_STRATEGY`` (see below)."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:366
msgid "``REBASE_CHECKOUT``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:358
msgid ""
"Same as ``REBASE`` except if the rebase fails, an annotated tag will be "
"created at the original ``HEAD`` position from before the rebase and then"
" checkout ``GIT_TAG`` just like the ``CHECKOUT`` strategy. The message "
"stored on the annotated tag will give information about what was "
"attempted and the tag name will include a timestamp so that each failed "
"run will add a new tag.  This strategy ensures no changes will be lost, "
"but updates should always succeed if ``GIT_TAG`` refers to a valid ref "
"unless there are uncommitted changes that cannot be popped successfully."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:368
msgid ""
"The variable ``CMAKE_EP_GIT_REMOTE_UPDATE_STRATEGY`` can be set to "
"override the default strategy.  This variable should not be set by a "
"project, it is intended for the user to set.  It is primarily intended "
"for use in continuous integration scripts to ensure that when history is "
"rewritten on a remote branch, the build doesn't end up with unintended "
"changes or failed builds resulting from conflicts during rebase "
"operations."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:391
msgid "*Subversion*"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:377
msgid "``SVN_REPOSITORY <url>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:377
msgid "URL of the Subversion repository."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:380
msgid "``SVN_REVISION -r<rev>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:380
msgid "Revision to checkout from the Subversion repository."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:383
msgid "``SVN_USERNAME <username>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:383
msgid "Username for the Subversion checkout and update."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:386
msgid "``SVN_PASSWORD <password>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:386
msgid "Password for the Subversion checkout and update."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:391
msgid "``SVN_TRUST_CERT <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:389
msgid ""
"Specifies whether to trust the Subversion server site certificate. If "
"enabled, the ``--trust-server-cert`` option is passed to the ``svn`` "
"checkout and update commands."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:398
msgid "*Mercurial*"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:395
msgid "``HG_REPOSITORY <url>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:395
msgid "URL of the mercurial repository."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:398
msgid "``HG_TAG <tag>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:398
msgid "Mercurial branch name, tag or commit id."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:408
msgid "*CVS*"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:402
msgid "``CVS_REPOSITORY <cvsroot>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:402
msgid "CVSROOT of the CVS repository."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:405
msgid "``CVS_MODULE <mod>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:405
msgid "Module to checkout from the CVS repository."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:408
msgid "``CVS_TAG <tag>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:408
msgid "Tag to checkout from the CVS repository."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:451
msgid "**Update/Patch Step Options:**"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:411
msgid ""
"Whenever CMake is re-run, by default the external project's sources will "
"be updated if the download method supports updates (e.g. a git repository"
" would be checked if the ``GIT_TAG`` does not refer to a specific "
"commit)."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:418
msgid "``UPDATE_COMMAND <cmd>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:416
msgid ""
"Overrides the download method's update step with a custom command. The "
"command may use :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:443
msgid "``UPDATE_DISCONNECTED <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:423
msgid ""
"When enabled, this option causes the update step to be skipped. It does "
"not, however, prevent the download step. The update step can still be "
"added as a step target (see :command:`ExternalProject_Add_StepTargets`) "
"and called manually. This is useful if you want to allow developers to "
"build the project when disconnected from the network (the network may "
"still be needed for the download step though)."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:430
msgid ""
"When this option is present, it is generally advisable to make the value "
"a cache variable under the developer's control rather than hard-coding "
"it. If this option is not present, the default value is taken from the "
"``EP_UPDATE_DISCONNECTED`` directory property. If that is also not "
"defined, updates are performed as normal. The ``EP_UPDATE_DISCONNECTED`` "
"directory property is intended as a convenience for controlling the "
"``UPDATE_DISCONNECTED`` behavior for an entire section of a project's "
"directory hierarchy and may be a more convenient method of giving "
"developers control over whether or not to perform updates (assuming the "
"project also provides a cache variable or some other convenient method "
"for setting the directory property)."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:442
msgid ""
"This may cause a step target to be created automatically for the "
"``download`` step.  See policy :policy:`CMP0114`."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:451
msgid "``PATCH_COMMAND <cmd>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:446
msgid ""
"Specifies a custom command to patch the sources after an update. By "
"default, no patch command is defined. Note that it can be quite difficult"
" to define an appropriate patch command that performs robustly, "
"especially for download methods such as git where changing the "
"``GIT_TAG`` will not discard changes from a previous patch, but the patch"
" command will be called again after updating to the new tag."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:558
msgid "**Configure Step Options:**"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:454
msgid ""
"The configure step is run after the download and update steps. By "
"default, the external project is assumed to be a CMake project, but this "
"can be overridden if required."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:464
msgid "``CONFIGURE_COMMAND <cmd>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:459
msgid ""
"The default configure command runs CMake with options based on the main "
"project. For non-CMake external projects, the ``CONFIGURE_COMMAND`` "
"option must be used to override this behavior (:manual:`generator "
"expressions <cmake-generator-expressions(7)>` are supported). For "
"projects that require no configure step, specify this option with an "
"empty string as the command to execute."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:471
msgid "``CMAKE_COMMAND /.../cmake``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:467
msgid ""
"Specify an alternative cmake executable for the configure step (use an "
"absolute path). This is generally not recommended, since it is usually "
"desirable to use the same CMake version throughout the whole build. This "
"option is ignored if a custom configure command has been specified with "
"``CONFIGURE_COMMAND``."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:477
msgid "``CMAKE_GENERATOR <gen>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:474
msgid ""
"Override the CMake generator used for the configure step. Without this "
"option, the same generator as the main build will be used. This option is"
" ignored if a custom configure command has been specified with the "
"``CONFIGURE_COMMAND`` option."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:484
msgid "``CMAKE_GENERATOR_PLATFORM <platform>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:482
msgid ""
"Pass a generator-specific platform name to the CMake command (see "
":variable:`CMAKE_GENERATOR_PLATFORM`). It is an error to provide this "
"option without the ``CMAKE_GENERATOR`` option."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:489
msgid "``CMAKE_GENERATOR_TOOLSET <toolset>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:487
msgid ""
"Pass a generator-specific toolset name to the CMake command (see "
":variable:`CMAKE_GENERATOR_TOOLSET`). It is an error to provide this "
"option without the ``CMAKE_GENERATOR`` option."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:496
msgid "``CMAKE_GENERATOR_INSTANCE <instance>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:494
msgid ""
"Pass a generator-specific instance selection to the CMake command (see "
":variable:`CMAKE_GENERATOR_INSTANCE`). It is an error to provide this "
"option without the ``CMAKE_GENERATOR`` option."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:505
msgid "``CMAKE_ARGS <arg>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:499
msgid ""
"The specified arguments are passed to the ``cmake`` command line. They "
"can be any argument the ``cmake`` command understands, not just cache "
"values defined by ``-D...`` arguments (see also :manual:`CMake Options "
"<cmake(1)>`)."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:504
#: ../../CMake/Modules/ExternalProject.cmake:515
msgid ""
"Arguments may use :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:516
msgid "``CMAKE_CACHE_ARGS <arg>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:508
msgid ""
"This is an alternate way of specifying cache variables where command line"
" length issues may become a problem. The arguments are expected to be in "
"the form ``-Dvar:STRING=value``, which are then transformed into CMake "
":command:`set` commands with the ``FORCE`` option used. These ``set()`` "
"commands are written to a pre-load script which is then applied using the"
" :manual:`cmake -C <cmake(1)>` command line option."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:531
msgid "``CMAKE_CACHE_DEFAULT_ARGS <arg>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:521
msgid ""
"This is the same as the ``CMAKE_CACHE_ARGS`` option except the ``set()`` "
"commands do not include the ``FORCE`` keyword. This means the values act "
"as initial defaults only and will not override any variables already set "
"from a previous run. Use this option with care, as it can lead to "
"different behavior depending on whether the build starts from a fresh "
"build directory or re-uses previous build contents."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:528
msgid ""
"If the CMake generator is the ``Green Hills MULTI`` and not overridden "
"then the original project's settings for the GHS toolset and target "
"system customization cache variables are propagated into the external "
"project."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:546
msgid "``SOURCE_SUBDIR <dir>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:536
msgid ""
"When no ``CONFIGURE_COMMAND`` option is specified, the configure step "
"assumes the external project has a ``CMakeLists.txt`` file at the top of "
"its source tree (i.e. in ``SOURCE_DIR``). The ``SOURCE_SUBDIR`` option "
"can be used to point to an alternative directory within the source tree "
"to use as the top of the CMake source tree instead. This must be a "
"relative path and it will be interpreted as being relative to "
"``SOURCE_DIR``."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:544
msgid ""
"When ``BUILD_IN_SOURCE`` option is enabled, the ``BUILD_COMMAND`` is used"
" to point to an alternative directory within the source tree."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:558
msgid "``CONFIGURE_HANDLED_BY_BUILD <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:551
msgid ""
"Enabling this option relaxes the dependencies of the configure step on "
"other external projects to order-only. This means the configure step will"
" be executed after its external project dependencies are built but it "
"will not be marked dirty when one of its external project dependencies is"
" rebuilt. This option can be enabled when the build step is smart enough "
"to figure out if the configure step needs to be rerun. CMake and Meson "
"are examples of build systems whose build step is smart enough to know if"
" the configure step needs to be rerun."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:600
msgid "**Build Step Options:**"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:561
msgid ""
"If the configure step assumed the external project uses CMake as its "
"build system, the build step will also. Otherwise, the build step will "
"assume a Makefile-based build and simply run ``make`` with no arguments "
"as the default build step. This can be overridden with custom build "
"commands if required."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:575
msgid "``BUILD_COMMAND <cmd>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:568
msgid ""
"Overrides the default build command (:manual:`generator expressions "
"<cmake-generator-expressions(7)>` are supported). If this option is not "
"given, the default build command will be chosen to integrate with the "
"main build in the most appropriate way (e.g. using recursive ``make`` for"
" Makefile generators or ``cmake --build`` if the project uses a CMake "
"build). This option can be specified with an empty string as the command "
"to make the build step do nothing."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:582
msgid "``BUILD_IN_SOURCE <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:578
msgid ""
"When this option is enabled, the build will be done directly within the "
"external project's source tree. This should generally be avoided, the use"
" of a separate build directory is usually preferred, but it can be useful"
" when the external project assumes an in-source build. The ``BINARY_DIR``"
" option should not be specified if building in-source."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:592
msgid "``BUILD_ALWAYS <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:585
msgid ""
"Enabling this option forces the build step to always be run. This can be "
"the easiest way to robustly ensure that the external project's own build "
"dependencies are evaluated rather than relying on the default success "
"timestamp-based method. This option is not normally needed unless "
"developers are expected to modify something the external project's build "
"depends on in a way that is not detectable via the step target "
"dependencies (e.g. ``SOURCE_DIR`` is used without a download method and "
"developers might modify the sources in ``SOURCE_DIR``)."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:600
msgid "``BUILD_BYPRODUCTS <file>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:597
msgid ""
"Specifies files that will be generated by the build command but which "
"might or might not have their modification time updated by subsequent "
"builds. These ultimately get passed through as ``BYPRODUCTS`` to the "
"build step's own underlying call to :command:`add_custom_command`."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:621
msgid "**Install Step Options:**"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:603
msgid ""
"If the configure step assumed the external project uses CMake as its "
"build system, the install step will also. Otherwise, the install step "
"will assume a Makefile-based build and simply run ``make install`` as the"
" default build step. This can be overridden with custom install commands "
"if required."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:621
msgid "``INSTALL_COMMAND <cmd>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:609
msgid ""
"The external project's own install step is invoked as part of the main "
"project's *build*. It is done after the external project's build step and"
" may be before or after the external project's test step (see the "
"``TEST_BEFORE_INSTALL`` option below). The external project's install "
"rules are not part of the main project's install rules, so if anything "
"from the external project should be installed as part of the main build, "
"these need to be specified in the main build as additional "
":command:`install` commands. The default install step builds the "
"``install`` target of the external project, but this can be overridden "
"with a custom command using this option (:manual:`generator expressions "
"<cmake-generator-expressions(7)>` are supported). Passing an empty string"
" as the ``<cmd>`` makes the install step do nothing."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:657
msgid "**Test Step Options:**"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:624
msgid ""
"The test step is only defined if at least one of the following "
"``TEST_...`` options are provided."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:636
msgid "``TEST_COMMAND <cmd>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:628
msgid ""
"Overrides the default test command (:manual:`generator expressions "
"<cmake-generator-expressions(7)>` are supported). If this option is not "
"given, the default behavior of the test step is to build the external "
"project's own ``test`` target. This option can be specified with "
"``<cmd>`` as an empty string, which allows the test step to still be "
"defined, but it will do nothing. Do not specify any of the other "
"``TEST_...`` options if providing an empty string as the test command, "
"but prefer to omit all ``TEST_...`` options altogether if the test step "
"target is not needed."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:641
msgid "``TEST_BEFORE_INSTALL <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:639
msgid ""
"When this option is enabled, the test step will be executed before the "
"install step. The default behavior is for the test step to run after the "
"install step."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:648
msgid "``TEST_AFTER_INSTALL <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:644
msgid ""
"This option is mainly useful as a way to indicate that the test step is "
"desired but all default behavior is sufficient. Specifying this option "
"with a boolean true value ensures the test step is defined and that it "
"comes after the install step. If both ``TEST_BEFORE_INSTALL`` and "
"``TEST_AFTER_INSTALL`` are enabled, the latter is silently ignored."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:657
msgid "``TEST_EXCLUDE_FROM_MAIN <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:653
msgid ""
"If enabled, the main build's default ALL target will not depend on the "
"test step. This can be a useful way of ensuring the test step is defined "
"but only gets invoked when manually requested. This may cause a step "
"target to be created automatically for either the ``install`` or "
"``build`` step.  See policy :policy:`CMP0114`."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:702
msgid "**Output Logging Options:**"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:660
msgid ""
"Each of the following ``LOG_...`` options can be used to wrap the "
"relevant step in a script to capture its output to files. The log files "
"will be created in ``LOG_DIR`` if supplied or otherwise the ``STAMP_DIR``"
" directory with step-specific file names."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:666
msgid "``LOG_DOWNLOAD <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:666
msgid "When enabled, the output of the download step is logged to files."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:669
msgid "``LOG_UPDATE <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:669
msgid "When enabled, the output of the update step is logged to files."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:674
msgid "``LOG_PATCH <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:674
msgid "When enabled, the output of the patch step is logged to files."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:677
msgid "``LOG_CONFIGURE <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:677
msgid "When enabled, the output of the configure step is logged to files."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:680
msgid "``LOG_BUILD <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:680
msgid "When enabled, the output of the build step is logged to files."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:683
msgid "``LOG_INSTALL <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:683
msgid "When enabled, the output of the install step is logged to files."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:686
msgid "``LOG_TEST <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:686
msgid "When enabled, the output of the test step is logged to files."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:692
msgid "``LOG_MERGED_STDOUTERR <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:691
msgid ""
"When enabled, stdout and stderr will be merged for any step whose output "
"is being logged to files."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:702
msgid "``LOG_OUTPUT_ON_FAILURE <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:697
msgid ""
"This option only has an effect if at least one of the other "
"``LOG_<step>`` options is enabled.  If an error occurs for a step which "
"has logging to file enabled, that step's output will be printed to the "
"console if ``LOG_OUTPUT_ON_FAILURE`` is set to true.  For cases where a "
"large amount of output is recorded, just the end of that output may be "
"printed to the console."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:730
msgid "**Terminal Access Options:**"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:707
msgid ""
"Steps can be given direct access to the terminal in some cases. Giving a "
"step access to the terminal may allow it to receive terminal input if "
"required, such as for authentication details not provided by other "
"options. With the :generator:`Ninja` generator, these options place the "
"steps in the ``console`` :prop_gbl:`job pool <JOB_POOLS>`. Each step can "
"be given access to the terminal individually via the following options:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:715
msgid "``USES_TERMINAL_DOWNLOAD <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:715
msgid "Give the download step access to the terminal."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:718
msgid "``USES_TERMINAL_UPDATE <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:718
msgid "Give the update step access to the terminal."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:721
msgid "``USES_TERMINAL_CONFIGURE <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:721
msgid "Give the configure step access to the terminal."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:724
msgid "``USES_TERMINAL_BUILD <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:724
msgid "Give the build step access to the terminal."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:727
msgid "``USES_TERMINAL_INSTALL <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:727
msgid "Give the install step access to the terminal."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:730
msgid "``USES_TERMINAL_TEST <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:730
msgid "Give the test step access to the terminal."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:767
msgid "**Target Options:**"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:741
msgid "``DEPENDS <targets>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:734
msgid ""
"Specify other targets on which the external project depends. The other "
"targets will be brought up to date before any of the external project's "
"steps are executed. Because the external project uses additional custom "
"targets internally for each step, the ``DEPENDS`` option is the most "
"convenient way to ensure all of those steps depend on the other targets. "
"Simply doing :command:`add_dependencies(\\<name\\> \\<targets\\>) "
"<add_dependencies>` will not make any of the steps dependent on "
"``<targets>``."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:745
msgid "``EXCLUDE_FROM_ALL <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:744
msgid ""
"When enabled, this option excludes the external project from the default "
"ALL target of the main build."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:753
msgid "``STEP_TARGETS <step-target>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:748
msgid ""
"Generate custom targets for the specified steps. This is required if the "
"steps need to be triggered manually or if they need to be used as "
"dependencies of other targets. If this option is not specified, the "
"default value is taken from the ``EP_STEP_TARGETS`` directory property. "
"See :command:`ExternalProject_Add_StepTargets` below for further "
"discussion of the effects of this option."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:767
msgid "``INDEPENDENT_STEP_TARGETS <step-target>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:756
msgid "This is allowed only if policy :policy:`CMP0114` is not set to ``NEW``."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:759
msgid ""
"Generates custom targets for the specified steps and prevent these "
"targets from having the usual dependencies applied to them. If this "
"option is not specified, the default value is taken from the "
"``EP_INDEPENDENT_STEP_TARGETS`` directory property. This option is mostly"
" useful for allowing individual steps to be driven independently, such as"
" for a CDash setup where each step should be initiated and reported "
"individually rather than as one whole build. See "
":command:`ExternalProject_Add_StepTargets` below for further discussion "
"of the effects of this option."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:791
msgid "**Miscellaneous Options:**"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:775
msgid "``LIST_SEPARATOR <sep>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:771
msgid ""
"For any of the various ``..._COMMAND`` options, replace ``;`` with "
"``<sep>`` in the specified command lines. This can be useful where list "
"variables may be given in commands where they should end up as space-"
"separated arguments (``<sep>`` would be a single space character string "
"in this case)."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:791
#: ../../CMake/Modules/ExternalProject.cmake:849
msgid "``COMMAND <cmd>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:778
msgid ""
"Any of the other ``..._COMMAND`` options can have additional commands "
"appended to them by following them with as many ``COMMAND ...`` options "
"as needed (:manual:`generator expressions <cmake-generator-"
"expressions(7)>` are supported). For example:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:793
msgid ""
"It should also be noted that each build step is created via a call to "
":command:`ExternalProject_Add_Step`. See that command's documentation for"
" the automatic substitutions that are supported for some options."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:798
msgid "Obtaining Project Properties"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:802
msgid ""
"The ``ExternalProject_Get_Property()`` function retrieves external "
"project target properties:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:809
msgid ""
"The function stores property values in variables of the same name. "
"Property names correspond to the keyword argument names of "
"``ExternalProject_Add()``. For example, the source directory might be "
"retrieved like so:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:819
msgid "Explicit Step Management"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:821
msgid ""
"The ``ExternalProject_Add()`` function on its own is often sufficient for"
" incorporating an external project into the main build. Certain scenarios"
" require additional work to implement desired behavior, such as adding in"
" a custom step or making steps available as manually triggerable targets."
" The ``ExternalProject_Add_Step()``, "
"``ExternalProject_Add_StepTargets()`` and "
"``ExternalProject_Add_StepDependencies`` functions provide the lower "
"level control needed to implement such step-level capabilities."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:831
msgid ""
"The ``ExternalProject_Add_Step()`` function specifies an additional "
"custom step for an external project defined by an earlier call to "
":command:`ExternalProject_Add`:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:839
msgid ""
"``<name>`` is the same as the name passed to the original call to "
":command:`ExternalProject_Add`. The specified ``<step>`` must not be one "
"of the pre-defined steps (``mkdir``, ``download``, ``update``, ``patch``,"
" ``configure``, ``build``, ``install`` or ``test``). The supported "
"options are:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:846
msgid ""
"The command line to be executed by this custom step (:manual:`generator "
"expressions <cmake-generator-expressions(7)>` are supported). This option"
" can be repeated multiple times to specify multiple commands to be "
"executed in order."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:852
msgid "``COMMENT \"<text>...\"``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:852
msgid "Text to be printed when the custom step executes."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:855
msgid "``DEPENDEES <step>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:855
msgid "Other steps (custom or pre-defined) on which this step depends."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:858
msgid "``DEPENDERS <step>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:858
msgid "Other steps (custom or pre-defined) that depend on this new custom step."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:861
msgid "``DEPENDS <file>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:861
msgid "Files on which this custom step depends."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:878
msgid "``INDEPENDENT <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:866
msgid ""
"Specifies whether this step is independent of the external dependencies "
"specified by the :command:`ExternalProject_Add`'s ``DEPENDS`` option. The"
" default is ``FALSE``.  Steps marked as independent may depend only on "
"other steps marked independent.  See policy :policy:`CMP0114`."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:871
msgid ""
"Note that this use of the term \"independent\" refers only to "
"independence from external targets specified by the ``DEPENDS`` option "
"and is orthogonal to a step's dependencies on other steps."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:875
msgid ""
"If a step target is created for an independent step by the "
":command:`ExternalProject_Add` ``STEP_TARGETS`` option or by the "
":command:`ExternalProject_Add_StepTargets` function, it will not depend "
"on the external targets, but may depend on targets for other steps."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:886
msgid "``BYPRODUCTS <file>...``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:883
msgid ""
"Files that will be generated by this custom step but which might or might"
" not have their modification time updated by subsequent builds. This list"
" of files will ultimately be passed through as the ``BYPRODUCTS`` option "
"to the :command:`add_custom_command` used to implement the custom step "
"internally."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:890
msgid "``ALWAYS <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:889
msgid ""
"When enabled, this option specifies that the custom step should always be"
" run (i.e. that it is always considered out of date)."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:896
msgid "``EXCLUDE_FROM_MAIN <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:893
msgid ""
"When enabled, this option specifies that the external project's main "
"target does not depend on the custom step. This may cause step targets to"
" be created automatically for the steps on which this step depends.  See "
"policy :policy:`CMP0114`."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:902
msgid "``WORKING_DIRECTORY <dir>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:899
msgid ""
"Specifies the working directory to set before running the custom step's "
"command. If this option is not specified, the directory will be the value"
" of the :variable:`CMAKE_CURRENT_BINARY_DIR` at the point where "
"``ExternalProject_Add_Step()`` was called."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:906
msgid "``LOG <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:905
msgid ""
"If set, this causes the output from the custom step to be captured to "
"files in the external project's ``LOG_DIR`` if supplied or ``STAMP_DIR``."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:910
msgid "``USES_TERMINAL <bool>``"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:909
msgid ""
"If enabled, this gives the custom step direct access to the terminal if "
"possible."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:912
msgid ""
"The command line, comment, working directory and byproducts of every "
"standard and custom step are processed to replace the tokens "
"``<SOURCE_DIR>``, ``<SOURCE_SUBDIR>``, ``<BINARY_DIR>``, "
"``<INSTALL_DIR>`` ``<TMP_DIR>``, ``<DOWNLOAD_DIR>`` and "
"``<DOWNLOADED_FILE>`` with their corresponding property values defined in"
" the original call to :command:`ExternalProject_Add`."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:919
msgid "Token replacement is extended to byproducts."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:922
msgid "The ``<DOWNLOAD_DIR>`` substitution token."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:927
msgid ""
"The ``ExternalProject_Add_StepTargets()`` function generates targets for "
"the steps listed. The name of each created target will be of the form "
"``<name>-<step>``:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:935
msgid ""
"Creating a target for a step allows it to be used as a dependency of "
"another target or to be triggered manually. Having targets for specific "
"steps also allows them to be driven independently of each other by "
"specifying targets on build command lines. For example, you may be "
"submitting to a sub-project based dashboard where you want to drive the "
"configure portion of the build, then submit to the dashboard, followed by"
" the build portion, followed by tests. If you invoke a custom target that"
" depends on a step halfway through the step dependency chain, then all "
"the previous steps will also run to ensure everything is up to date."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:945
msgid ""
"Internally, :command:`ExternalProject_Add` calls "
":command:`ExternalProject_Add_Step` to create each step. If any "
"``STEP_TARGETS`` were specified, then "
"``ExternalProject_Add_StepTargets()`` will also be called after "
":command:`ExternalProject_Add_Step`.  Even if a step is not mentioned in "
"the ``STEP_TARGETS`` option, ``ExternalProject_Add_StepTargets()`` can "
"still be called later to manually define a target for the step."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:953
msgid ""
"The ``STEP_TARGETS`` option for :command:`ExternalProject_Add` is "
"generally the easiest way to ensure targets are created for specific "
"steps of interest. For custom steps, "
"``ExternalProject_Add_StepTargets()`` must be called explicitly if a "
"target should also be created for that custom step. An alternative to "
"these two options is to populate the ``EP_STEP_TARGETS`` directory "
"property.  It acts as a default for the step target options and can save "
"having to repeatedly specify the same set of step targets when multiple "
"external projects are being defined."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:962
msgid ""
"If :policy:`CMP0114` is set to ``NEW``, step targets are fully "
"responsible for holding the custom commands implementing their steps.  "
"The primary target created by ``ExternalProject_Add`` depends on the step"
" targets, and the step targets depend on each other.  The target-level "
"dependencies match the file-level dependencies used by the custom "
"commands for each step. The targets for steps created with "
":command:`ExternalProject_Add_Step`'s ``INDEPENDENT`` option do not "
"depend on the external targets specified by "
":command:`ExternalProject_Add`'s ``DEPENDS`` option.  The predefined "
"steps ``mkdir``, ``download``, ``update``, and ``patch`` are independent."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:973
msgid ""
"If :policy:`CMP0114` is not ``NEW``, the following deprecated behavior is"
" available:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:976
msgid ""
"A deprecated ``NO_DEPENDS`` option may be specified immediately after the"
" ``<name>`` and before the first step. If the ``NO_DEPENDS`` option is "
"specified, the step target will not depend on the dependencies of the "
"external project (i.e. on any dependencies of the ``<name>`` custom "
"target created by :command:`ExternalProject_Add`). This is usually safe "
"for the ``download``, ``update`` and ``patch`` steps, since they do not "
"typically require that the dependencies are updated and built. Using "
"``NO_DEPENDS`` for any of the other pre-defined steps, however, may break"
" parallel builds. Only use ``NO_DEPENDS`` where it is certain that the "
"named steps genuinely do not have dependencies. For custom steps, "
"consider whether or not the custom commands require the dependencies to "
"be configured, built and installed."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:989
msgid ""
"The ``INDEPENDENT_STEP_TARGETS`` option for "
":command:`ExternalProject_Add`, or the ``EP_INDEPENDENT_STEP_TARGETS`` "
"directory property, tells the function to call "
"``ExternalProject_Add_StepTargets()`` internally using the ``NO_DEPENDS``"
" option for the specified steps."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:998
msgid ""
"The ``ExternalProject_Add_StepDependencies()`` function can be used to "
"add dependencies to a step. The dependencies added must be targets CMake "
"already knows about (these can be ordinary executable or library targets,"
" custom targets or even step targets of another external project):"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:1007
msgid ""
"This function takes care to set both target and file level dependencies "
"and will ensure that parallel builds will not break. It should be used "
"instead of :command:`add_dependencies` whenever adding a dependency for "
"some of the step targets generated by the ``ExternalProject`` module."
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:1013
msgid "Examples"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:1015
msgid ""
"The following example shows how to download and build a hypothetical "
"project called *FooBar* from github:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:1026
msgid ""
"For the sake of the example, also define a second hypothetical external "
"project called *SecretSauce*, which is downloaded from a web server. Two "
"URLs are given to take advantage of a faster internal network if "
"available, with a fallback to a slower external server. The project is a "
"typical ``Makefile`` project with no configure step, so some of the "
"default commands are overridden. The build is only required to build the "
"*sauce* target:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:1044
msgid ""
"Suppose the build step of ``secretsauce`` requires that ``foobar`` must "
"already be built. This could be enforced like so:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:1051
msgid ""
"Another alternative would be to create a custom target for ``foobar``'s "
"build step and make ``secretsauce`` depend on that rather than the whole "
"``foobar`` project. This would mean ``foobar`` only needs to be built, it"
" doesn't need to run its install or test steps before ``secretsauce`` can"
" be built. The dependency can also be defined along with the "
"``secretsauce`` project:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:1069
msgid ""
"Instead of calling :command:`ExternalProject_Add_StepTargets`, the target"
" could be defined along with the ``foobar`` project itself:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:1080
msgid ""
"If many external projects should have the same set of step targets, "
"setting a directory property may be more convenient. The ``build`` step "
"target could be created automatically by setting the ``EP_STEP_TARGETS`` "
"directory property before creating the external projects with "
":command:`ExternalProject_Add`:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:1089
msgid ""
"Lastly, suppose that ``secretsauce`` provides a script called ``makedoc``"
" which can be used to generate its own documentation. Further suppose "
"that the script expects the output directory to be provided as the only "
"parameter and that it should be run from the ``secretsauce`` source "
"directory. A custom step and a custom target to trigger the script can be"
" defined like so:"
msgstr ""

#: ../../CMake/Modules/ExternalProject.cmake:1106
msgid "The custom step could then be triggered from the main build like so::"
msgstr ""

