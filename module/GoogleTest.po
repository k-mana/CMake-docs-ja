# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.20.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-19 02:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../CMake/Modules/GoogleTest.cmake:6
msgid "GoogleTest"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:10
msgid ""
"This module defines functions to help use the Google Test infrastructure."
"  Two mechanisms for adding tests are provided. "
":command:`gtest_add_tests` has been around for some time, originally via "
"``find_package(GTest)``. :command:`gtest_discover_tests` was introduced "
"in CMake 3.10."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:15
msgid ""
"The (older) :command:`gtest_add_tests` scans source files to identify "
"tests. This is usually effective, with some caveats, including in cross-"
"compiling environments, and makes setting additional properties on tests "
"more convenient. However, its handling of parameterized tests is less "
"comprehensive, and it requires re-running CMake to detect changes to the "
"list of tests."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:21
msgid ""
"The (newer) :command:`gtest_discover_tests` discovers tests by asking the"
" compiled test executable to enumerate its tests.  This is more robust "
"and provides better handling of parameterized tests, and does not require"
" CMake to be re-run when tests change.  However, it may not work in a "
"cross-compiling environment, and setting test properties is less "
"convenient."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:27
msgid ""
"More details can be found in the documentation of the respective "
"functions."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:29
msgid ""
"Both commands are intended to replace use of :command:`add_test` to "
"register tests, and will create a separate CTest test for each Google "
"Test test case. Note that this is in some cases less efficient, as common"
" set-up and tear-down logic cannot be shared by multiple test cases "
"executing in the same instance. However, it provides more fine-grained "
"pass/fail information to CTest, which is usually considered as more "
"beneficial.  By default, the CTest test name is the same as the Google "
"Test name (i.e. ``suite.testcase``); see also ``TEST_PREFIX`` and "
"``TEST_SUFFIX``."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:40
msgid ""
"Automatically add tests with CTest by scanning source code for Google "
"Test macros::"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:53
msgid ""
"``gtest_add_tests`` attempts to identify tests by scanning source files. "
"Although this is generally effective, it uses only a basic regular "
"expression match, which can be defeated by atypical test declarations, "
"and is unable to fully \"split\" parameterized tests.  Additionally, it "
"requires that CMake be re-run to discover any newly added, removed or "
"renamed tests (by default, this means that CMake is re-run when any test "
"source file is changed, but see ``SKIP_DEPENDENCY``).  However, it has "
"the advantage of declaring tests at CMake time, which somewhat simplifies"
" setting additional properties on tests, and always works in a cross-"
"compiling environment."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:63
#: ../../CMake/Modules/GoogleTest.cmake:182
msgid "The options are:"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:68
msgid "``TARGET target``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:66
#: ../../CMake/Modules/GoogleTest.cmake:185
msgid ""
"Specifies the Google Test executable, which must be a known CMake "
"executable target.  CMake will substitute the location of the built "
"executable when running the test."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:73
msgid "``SOURCES src1...``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:71
msgid ""
"When provided, only the listed files will be scanned for test cases.  If "
"this option is not given, the :prop_tgt:`SOURCES` property of the "
"specified ``target`` will be used to obtain the list of sources."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:76
#: ../../CMake/Modules/GoogleTest.cmake:190
msgid "``EXTRA_ARGS arg1...``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:76
#: ../../CMake/Modules/GoogleTest.cmake:190
msgid "Any extra arguments to pass on the command line to each test case."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:80
#: ../../CMake/Modules/GoogleTest.cmake:194
msgid "``WORKING_DIRECTORY dir``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:79
#: ../../CMake/Modules/GoogleTest.cmake:193
msgid ""
"Specifies the directory in which to run the discovered test cases.  If "
"this option is not provided, the current binary directory is used."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:85
#: ../../CMake/Modules/GoogleTest.cmake:200
msgid "``TEST_PREFIX prefix``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:83
msgid ""
"Specifies a ``prefix`` to be prepended to the name of each discovered "
"test case.  This can be useful when the same source files are being used "
"in multiple calls to ``gtest_add_test()`` but with different "
"``EXTRA_ARGS``."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:90
#: ../../CMake/Modules/GoogleTest.cmake:205
msgid "``TEST_SUFFIX suffix``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:88
#: ../../CMake/Modules/GoogleTest.cmake:203
msgid ""
"Similar to ``TEST_PREFIX`` except the ``suffix`` is appended to the name "
"of every discovered test case.  Both ``TEST_PREFIX`` and ``TEST_SUFFIX`` "
"may be specified."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:97
msgid "``SKIP_DEPENDENCY``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:93
msgid ""
"Normally, the function creates a dependency which will cause CMake to be "
"re-run if any of the sources being scanned are changed.  This is to "
"ensure that the list of discovered tests is updated.  If this behavior is"
" not desired (as may be the case while actually writing the test cases), "
"this option can be used to prevent the dependency from being added."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:102
msgid "``TEST_LIST outVar``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:100
msgid ""
"The variable named by ``outVar`` will be populated in the calling scope "
"with the list of discovered test cases.  This allows the caller to do "
"things like manipulate test properties of the discovered tests."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:104
msgid "Usage example:"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:122
msgid "For backward compatibility, the following form is also supported::"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:126
msgid "``exe``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:127
msgid "The path to the test executable or the name of a CMake target."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:130
msgid "``args``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:129
msgid ""
"A ;-list of extra arguments to be passed to executable.  The entire list "
"must be passed as a single argument.  Enclose it in quotes, or pass "
"``\"\"`` for no arguments."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:135
msgid "``files...``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:133
msgid ""
"A list of source files to search for tests and test fixtures. "
"Alternatively, use ``AUTO`` to specify that ``exe`` is the name of a "
"CMake executable target whose sources should be scanned."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:146
msgid ""
"Automatically add tests with CTest by querying the compiled test "
"executable for available tests::"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:164
msgid ""
"``gtest_discover_tests()`` sets up a post-build command on the test "
"executable that generates the list of tests by parsing the output from "
"running the test with the ``--gtest_list_tests`` argument.  Compared to "
"the source parsing approach of :command:`gtest_add_tests`, this ensures "
"that the full list of tests, including instantiations of parameterized "
"tests, is obtained.  Since test discovery occurs at build time, it is not"
" necessary to re-run CMake when the list of tests changes. However, it "
"requires that :prop_tgt:`CROSSCOMPILING_EMULATOR` is properly set in "
"order to function in a cross-compiling environment."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:174
msgid ""
"Additionally, setting properties on tests is somewhat less convenient, "
"since the tests are not available at CMake time.  Additional test "
"properties may be assigned to the set of tests as a whole using the "
"``PROPERTIES`` option.  If more fine-grained test control is needed, "
"custom content may be provided through an external CTest script using the"
" :prop_dir:`TEST_INCLUDE_FILES` directory property.  The set of "
"discovered tests is made accessible to such a script via the "
"``<target>_TESTS`` variable."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:187
msgid "``target``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:197
msgid ""
"Specifies a ``prefix`` to be prepended to the name of each discovered "
"test case.  This can be useful when the same test executable is being "
"used in multiple calls to ``gtest_discover_tests()`` but with different "
"``EXTRA_ARGS``."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:211
msgid "``NO_PRETTY_TYPES``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:208
msgid ""
"By default, the type index of type-parameterized tests is replaced by the"
" actual type name in the CTest test name.  If this behavior is "
"undesirable (e.g. because the type names are unwieldy), this option will "
"suppress this behavior."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:217
msgid "``NO_PRETTY_VALUES``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:214
msgid ""
"By default, the value index of value-parameterized tests is replaced by "
"the actual value in the CTest test name.  If this behavior is undesirable"
" (e.g. because the value strings are unwieldy), this option will suppress"
" this behavior."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:221
msgid "``PROPERTIES name1 value1...``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:220
msgid ""
"Specifies additional properties to be set on all tests discovered by this"
" invocation of ``gtest_discover_tests()``."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:227
msgid "``TEST_LIST var``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:224
msgid ""
"Make the list of tests available in the variable ``var``, rather than the"
" default ``<target>_TESTS``.  This can be useful when the same test "
"executable is being used in multiple calls to ``gtest_discover_tests()``."
" Note that this variable is only available in CTest."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:247
msgid "``DISCOVERY_TIMEOUT num``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:232
msgid ""
"Specifies how long (in seconds) CMake will wait for the test to enumerate"
" available tests.  If the test takes longer than this, discovery (and "
"your build) will fail.  Most test executables will enumerate their tests "
"very quickly, but under some exceptional circumstances, a test may "
"require a longer timeout.  The default is 5.  See also the ``TIMEOUT`` "
"option of :command:`execute_process`."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:241
msgid ""
"In CMake versions 3.10.1 and 3.10.2, this option was called ``TIMEOUT``. "
"This clashed with the ``TIMEOUT`` test property, which is one of the "
"common properties that would be set with the ``PROPERTIES`` keyword, "
"usually leading to legal but unintended behavior.  The keyword was "
"changed to ``DISCOVERY_TIMEOUT`` in CMake 3.10.3 to address this problem."
"  The ambiguous behavior of the ``TIMEOUT`` keyword in 3.10.1 and 3.10.2 "
"has not been preserved."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:256
msgid "``XML_OUTPUT_DIR dir``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:252
msgid ""
"If specified, the parameter is passed along with ``--gtest_output=xml:`` "
"to test executable. The actual file name is the same as the test target, "
"including prefix and suffix. This should be used instead of ``EXTRA_ARGS "
"--gtest_output=xml`` to avoid race conditions writing the XML result "
"output when using parallel test execution."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:273
msgid "``DISCOVERY_MODE``"
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:261
msgid ""
"Provides greater control over when ``gtest_discover_tests()`` performs "
"test discovery. By default, ``POST_BUILD`` sets up a post-build command "
"to perform test discovery at build time. In certain scenarios, like "
"cross-compiling, this ``POST_BUILD`` behavior is not desirable. By "
"contrast, ``PRE_TEST`` delays test discovery until just prior to test "
"execution. This way test discovery occurs in the target environment where"
" the test has a better chance at finding appropriate runtime "
"dependencies."
msgstr ""

#: ../../CMake/Modules/GoogleTest.cmake:270
msgid ""
"``DISCOVERY_MODE`` defaults to the value of the "
"``CMAKE_GTEST_DISCOVER_TESTS_DISCOVERY_MODE`` variable if it is not "
"passed when calling ``gtest_discover_tests()``. This provides a mechanism"
" for globally selecting a preferred test discovery behavior without "
"having to modify each call site."
msgstr ""

