# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.20.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-19 02:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../CMake/Modules/UseJava.cmake:6
msgid "UseJava"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:8
msgid "Use Module for Java"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:10
msgid ""
"This file provides functions for Java.  It is assumed that "
":module:`FindJava` has already been loaded.  See :module:`FindJava` for "
"information on how to load Java into your CMake project."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:15
msgid "Creating And Installing JARs"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:30
msgid ""
"This command creates a ``<target_name>.jar``.  It compiles the given "
"``<source>`` files and adds the given ``<resource>`` files to the jar "
"file.  Source files can be java files or listing files (prefixed by "
"``@``).  If only resource files are given then just a jar file is "
"created.  The list of ``INCLUDE_JARS`` are added to the classpath when "
"compiling the java sources and also to the dependencies of the target. "
"``INCLUDE_JARS`` also accepts other target names created by "
"``add_jar()``. For backwards compatibility, jar files listed as sources "
"are ignored (as they have been since the first version of this module)."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:40
msgid "Support for response files (prefixed by ``@``) in the ``SOURCES`` list."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:43
msgid ""
"The default ``OUTPUT_DIR`` can also be changed by setting the variable "
"``CMAKE_JAVA_TARGET_OUTPUT_DIR``."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:46
msgid ""
"Optionally, using option ``GENERATE_NATIVE_HEADERS``, native header files"
" can be generated for methods declared as native.  These files provide "
"the connective glue that allow your Java and C code to interact.  An "
"INTERFACE target will be created for an easy usage of generated files.  "
"Sub-option ``DESTINATION`` can be used to specify the output directory "
"for generated header files."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:54
msgid ""
"``GENERATE_NATIVE_HEADERS`` option requires, at least, version 1.8 of the"
" JDK."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:56
msgid ""
"``DESTINATION`` sub-option now supports the possibility to specify "
"different output directories for ``BUILD`` and ``INSTALL`` steps. This is"
" required to export the interface target generated by "
"``GENERATE_NATIVE_HEADERS`` option. If ``BUILD`` directory is not "
"specified, a default directory will be used."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:62
msgid ""
"The ``add_jar()`` function sets the following target properties on "
"``<target_name>``:"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:65
msgid "``INSTALL_FILES``"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:66
msgid "The files which should be installed.  This is used by ``install_jar()``."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:68
msgid "``JNI_SYMLINK``"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:68
msgid ""
"The JNI symlink which should be installed.  This is used by "
"``install_jni_symlink()``."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:70
msgid "``JAR_FILE``"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:71
msgid "The location of the jar file so that you can include it."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:74
msgid "``CLASSDIR``"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:73
msgid ""
"The directory where the class files can be found.  For example to use "
"them with ``javah``."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:76
msgid ""
"The target generated by option ``GENERATE_NATIVE_HEADERS`` has the "
"property ``NATIVE_HEADERS_DIRECTORY`` which specify the directory holding"
" the native headers."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:86
msgid ""
"This command installs the ``<target_name>`` files to the given "
"``<destination>``.  It should be called in the same scope as "
"``add_jar()`` or it will fail."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:90
msgid ""
"The ``install_jar()`` function sets the ``INSTALL_DESTINATION`` target "
"property on jars so installed.  This property holds the ``<destination>``"
" as described above, and is used by ``install_jar_exports()``.  You can "
"get this information with :command:`get_property` and the "
"``INSTALL_DESTINATION`` property key."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:96 ../../CMake/Modules/UseJava.cmake:108
msgid "The second signature with ``DESTINATION`` and ``COMPONENT`` options."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:104
msgid ""
"This command installs the ``<target_name>`` JNI symlinks to the given "
"``<destination>``.  It should be called in the same scope as "
"``add_jar()`` or it will fail."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:112
msgid "Exporting JAR Targets"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:123
msgid ""
"This command installs a target export file ``<filename>`` for the named "
"jar targets to the given ``<destination>`` directory.  Its function is "
"similar to that of :command:`install(EXPORTS)`."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:127 ../../CMake/Modules/UseJava.cmake:139
msgid "The ``NAMESPACE`` option."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:136
msgid ""
"This command writes a target export file ``<filename>`` for the named "
"``<jars>`` targets.  Its function is similar to that of "
":command:`export`."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:144
msgid "Examples"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:146
msgid ""
"To add compile flags to the target you can set these flags with the "
"following variable:"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:154
msgid ""
"To add a path or a jar file to the class path you can do this with the "
"``CMAKE_JAVA_INCLUDE_PATH`` variable."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:161
msgid "To use a different output name for the target you can set it with:"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:167
msgid ""
"To use a different output directory than ``CMAKE_CURRENT_BINARY_DIR`` you"
" can set it with:"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:174
msgid ""
"To define an entry point in your jar you can set it with the "
"``ENTRY_POINT`` named argument:"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:181
msgid ""
"To define a custom manifest for the jar, you can set it with the "
"``MANIFEST`` named argument:"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:188
msgid ""
"To add a version to the target output name you can set it using the "
"``VERSION`` named argument to ``add_jar()``.  The following example will "
"create a jar file with the name ``shibboleet-1.0.0.jar`` and will create "
"a symlink ``shibboleet.jar`` pointing to the jar with the version "
"information."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:197
msgid ""
"If the target is a JNI library, utilize the following commands to create "
"a JNI symbolic link:"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:207
msgid ""
"If a single target needs to produce more than one jar from its java "
"source code, to prevent the accumulation of duplicate class files in "
"subsequent jars, set/reset ``CMAKE_JAR_CLASSES_PREFIX`` prior to calling "
"the ``add_jar()`` function:"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:220
msgid ""
"For an optimum usage of option ``GENERATE_NATIVE_HEADERS``, it is "
"recommended to include module JNI before any call to ``add_jar()``. The "
"produced target for native headers can then be used to compile C/C++ "
"sources with the :command:`target_link_libraries` command."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:232
msgid ""
"It is now possible to export the target generated by "
"``GENERATE_NATIVE_HEADERS`` option."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:246
msgid "Finding JARs"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:257
msgid ""
"This command is used to find a full path to the named jar.  A cache entry"
" named by ``<VAR>`` is created to store the result of this command. If "
"the full path to a jar is found the result is stored in the variable and "
"the search will not repeated unless the variable is cleared.  If nothing "
"is found, the result will be ``<VAR>-NOTFOUND``, and the search will be "
"attempted again next time ``find_jar()`` is invoked with the same "
"variable.  The name of the full path to a file that is searched for is "
"specified by the names listed after ``NAMES`` argument. Additional search"
" locations can be specified after the ``PATHS`` argument. If you require "
"special a version of a jar file you can specify it with the ``VERSIONS`` "
"argument.  The argument after ``DOC`` will be used for the documentation "
"string in the cache."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:272
msgid "Javadoc"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:274
msgid ""
"The ``create_javadoc()`` command can be used to create java documentation"
" based on files or packages.  For more details please read the javadoc "
"manpage."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:277
msgid ""
"There are two main signatures for ``create_javadoc()``.  The first "
"signature works with package names on a path with source files."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:294 ../../CMake/Modules/UseJava.cmake:325
msgid "For example:"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:309
msgid ""
"The second signature for ``create_javadoc()`` works on a given list of "
"files."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:339
msgid ""
"Both signatures share most of the options.  These options are the same as"
" what you can find in the javadoc manpage.  Please look at the manpage "
"for ``CLASSPATH``, ``DOCTITLE``, ``WINDOWTITLE``, ``AUTHOR``, ``USE`` and"
" ``VERSION``."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:344
msgid ""
"If you don't set the ``INSTALLPATH``, then by default the documentation "
"will be installed to :"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:353
msgid "Header Generation"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:366
msgid ""
"This command will no longer be supported starting with version 10 of the "
"JDK due to the `suppression of javah tool "
"<http://openjdk.java.net/jeps/313>`_. The "
"``add_jar(GENERATE_NATIVE_HEADERS)`` command should be used instead."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:371
msgid ""
"Create C header files from java classes. These files provide the "
"connective glue that allow your Java and C code to interact."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:374
msgid ""
"There are two main signatures for ``create_javah()``.  The first "
"signature returns generated files through variable specified by the "
"``GENERATED_FILES`` option.  For example:"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:385
msgid ""
"The second signature for ``create_javah()`` creates a target which "
"encapsulates header files generation. E.g."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:395
msgid "Both signatures share same options."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:398
msgid "``CLASSES <class>...``"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:398
msgid "Specifies Java classes used to generate headers."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:402
msgid "``CLASSPATH <classpath>...``"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:401
msgid ""
"Specifies various paths to look up classes. Here .class files, jar files "
"or targets created by command add_jar can be used."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:405
msgid "``DEPENDS <depend>...``"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:405
msgid "Targets on which the javah target depends."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:409
msgid "``OUTPUT_NAME <path>``"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:408
msgid ""
"Concatenates the resulting header files for all the classes listed by "
"option ``CLASSES`` into ``<path>``.  Same behavior as option ``-o`` of "
"javah tool."
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:1505
msgid "``OUTPUT_DIR <path>``"
msgstr ""

#: ../../CMake/Modules/UseJava.cmake:412
msgid ""
"Sets the directory where the header files will be generated.  Same "
"behavior as option ``-d`` of javah tool.  If not specified, "
":variable:`CMAKE_CURRENT_BINARY_DIR` is used as the output directory."
msgstr ""

