# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.20.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-19 02:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:6
msgid "WriteCompilerDetectionHeader"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:8
msgid ""
"This module is available only if policy :policy:`CMP0120` is not set to "
"``NEW``.  Do not use it in new code."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:14
msgid "This module provides the function ``write_compiler_detection_header()``."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:16
msgid ""
"This function can be used to generate a file suitable for preprocessor "
"inclusion which contains macros to be used in source code::"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:33
msgid ""
"This generates the file ``<file>`` with macros which all have the prefix "
"``<prefix>``."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:36
msgid ""
"By default, all content is written directly to the ``<file>``.  The "
"``OUTPUT_FILES_VAR`` may be specified to cause the compiler-specific "
"content to be written to separate files.  The separate files are then "
"available in the ``<output_files_var>`` and may be consumed by the caller"
" for installation for example.  The ``OUTPUT_DIR`` specifies a relative "
"path from the main ``<file>`` to the compiler-specific files. For "
"example:"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:63
msgid ""
"``VERSION`` may be used to specify the API version to be generated. "
"Future versions of CMake may introduce alternative APIs.  A given API is "
"selected by any ``<version>`` value greater than or equal to the version "
"of CMake that introduced the given API and less than the version of CMake"
" that introduced its succeeding API. The value of the "
":variable:`CMAKE_MINIMUM_REQUIRED_VERSION` variable is used if no "
"explicit version is specified. (As of CMake version |release| there is "
"only one API version.)"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:72
msgid ""
"``PROLOG`` may be specified as text content to write at the start of the "
"header. ``EPILOG`` may be specified as text content to write at the end "
"of the header"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:76
msgid ""
"At least one ``<compiler>`` and one ``<feature>`` must be listed.  "
"Compilers which are known to CMake, but not specified are detected and a "
"preprocessor ``#error`` is generated for them.  A preprocessor macro "
"matching ``<PREFIX>_COMPILER_IS_<compiler>`` is generated for each "
"compiler known to CMake to contain the value ``0`` or ``1``."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:82
msgid ""
"Possible compiler identifiers are documented with the "
":variable:`CMAKE_<LANG>_COMPILER_ID` variable. Available features in this"
" version of CMake are listed in the :prop_gbl:`CMAKE_C_KNOWN_FEATURES` "
"and :prop_gbl:`CMAKE_CXX_KNOWN_FEATURES` global properties. See the "
":manual:`cmake-compile-features(7)` manual for information on compile "
"features."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:90
msgid "Added ``MSVC`` and ``AppleClang`` compiler support."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:93
msgid "Added ``Intel`` compiler support."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:96
msgid "The ``{c,cxx}_std_*`` meta-features are ignored if requested."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:99
msgid ""
"``ALLOW_UNKNOWN_COMPILERS`` and ``ALLOW_UNKNOWN_COMPILER_VERSIONS`` cause"
" the module to generate conditions that treat unknown compilers as simply"
" lacking all features.  Without these options the default behavior is to "
"generate a ``#error`` for unknown compilers and versions."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:105
msgid ""
"``BARE_FEATURES`` will define the compatibility macros with the name used"
" in newer versions of the language standard, so the code can use the new "
"feature name unconditionally."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:111
msgid "Feature Test Macros"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:113
msgid ""
"For each compiler, a preprocessor macro is generated matching "
"``<PREFIX>_COMPILER_IS_<compiler>`` which has the content either ``0`` or"
" ``1``, depending on the compiler in use. Preprocessor macros for "
"compiler version components are generated matching "
"``<PREFIX>_COMPILER_VERSION_MAJOR`` ``<PREFIX>_COMPILER_VERSION_MINOR`` "
"and ``<PREFIX>_COMPILER_VERSION_PATCH`` containing decimal values for the"
" corresponding compiler version components, if defined."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:121
msgid ""
"A preprocessor test is generated based on the compiler version denoting "
"whether each feature is enabled.  A preprocessor macro matching "
"``<PREFIX>_COMPILER_<FEATURE>``, where ``<FEATURE>`` is the upper-case "
"``<feature>`` name, is generated to contain the value ``0`` or ``1`` "
"depending on whether the compiler in use supports the feature:"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:153
msgid "Symbol Macros"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:155
msgid ""
"Some additional symbol-defines are created for particular features for "
"use as symbols which may be conditionally defined empty:"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:165
msgid ""
"The ``ClimbingStats_FINAL`` macro will expand to ``final`` if the "
"compiler (and its flags) support the ``cxx_final`` feature, and the "
"``ClimbingStats_CONSTEXPR`` macro will expand to ``constexpr`` if "
"``cxx_constexpr`` is supported."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:170
msgid ""
"If ``BARE_FEATURES cxx_final`` was given as argument the ``final`` "
"keyword will be defined for old compilers, too."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:173
msgid ""
"The following features generate corresponding symbol defines and if they "
"are available as ``BARE_FEATURES``:"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:177
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:222
msgid "Feature"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:177
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:222
msgid "Define"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:177
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:222
msgid "Symbol"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:177
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:222
msgid "bare"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:179
msgid "``c_restrict``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:179
msgid "``<PREFIX>_RESTRICT``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:179
msgid "``restrict``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:179
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:180
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:183
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:184
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:186
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:226
msgid "yes"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:180
msgid "``cxx_constexpr``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:180
msgid "``<PREFIX>_CONSTEXPR``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:180
msgid "``constexpr``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:181
msgid "``cxx_deleted_functions``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:181
msgid "``<PREFIX>_DELETED_FUNCTION``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:181
msgid "``= delete``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:182
msgid "``cxx_extern_templates``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:182
msgid "``<PREFIX>_EXTERN_TEMPLATE``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:182
msgid "``extern``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:183
msgid "``cxx_final``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:183
msgid "``<PREFIX>_FINAL``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:183
msgid "``final``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:184
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:185
msgid "``cxx_noexcept``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:184
msgid "``<PREFIX>_NOEXCEPT``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:184
msgid "``noexcept``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:185
msgid "``<PREFIX>_NOEXCEPT_EXPR(X)``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:185
msgid "``noexcept(X)``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:186
msgid "``cxx_override``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:186
msgid "``<PREFIX>_OVERRIDE``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:186
msgid "``override``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:190
msgid "Compatibility Implementation Macros"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:192
msgid ""
"Some features are suitable for wrapping in a macro with a backward "
"compatibility implementation if the compiler does not support the "
"feature."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:195
msgid ""
"When the ``cxx_static_assert`` feature is not provided by the compiler, a"
" compatibility implementation is available via the "
"``<PREFIX>_STATIC_ASSERT(COND)`` and ``<PREFIX>_STATIC_ASSERT_MSG(COND, "
"MSG)`` function-like macros. The macros expand to ``static_assert`` where"
" that compiler feature is available, and to a compatibility "
"implementation otherwise. In the first form, the condition is stringified"
" in the message field of ``static_assert``.  In the second form, the "
"message ``MSG`` is passed to the message field of ``static_assert``, or "
"ignored if using the backward compatibility implementation."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:206
msgid ""
"The ``cxx_attribute_deprecated`` feature provides a macro definition "
"``<PREFIX>_DEPRECATED``, which expands to either the standard "
"``[[deprecated]]`` attribute or a compiler-specific decorator such as "
"``__attribute__((__deprecated__))`` used by GNU compilers."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:211
msgid ""
"The ``cxx_alignas`` feature provides a macro definition "
"``<PREFIX>_ALIGNAS`` which expands to either the standard ``alignas`` "
"decorator or a compiler-specific decorator such as ``__attribute__ "
"((__aligned__))`` used by GNU compilers."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:216
msgid ""
"The ``cxx_alignof`` feature provides a macro definition "
"``<PREFIX>_ALIGNOF`` which expands to either the standard ``alignof`` "
"decorator or a compiler-specific decorator such as ``__alignof__`` used "
"by GNU compilers."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:224
msgid "``cxx_alignas``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:224
msgid "``<PREFIX>_ALIGNAS``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:224
msgid "``alignas``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:225
msgid "``cxx_alignof``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:225
msgid "``<PREFIX>_ALIGNOF``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:225
msgid "``alignof``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:226
msgid "``cxx_nullptr``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:226
msgid "``<PREFIX>_NULLPTR``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:226
msgid "``nullptr``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:227
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:228
msgid "``cxx_static_assert``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:227
msgid "``<PREFIX>_STATIC_ASSERT``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:227
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:228
msgid "``static_assert``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:228
msgid "``<PREFIX>_STATIC_ASSERT_MSG``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:229
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:230
msgid "``cxx_attribute_deprecated``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:229
msgid "``<PREFIX>_DEPRECATED``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:229
#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:230
msgid "``[[deprecated]]``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:230
msgid "``<PREFIX>_DEPRECATED_MSG``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:231
msgid "``cxx_thread_local``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:231
msgid "``<PREFIX>_THREAD_LOCAL``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:231
msgid "``thread_local``"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:234
msgid ""
"A use-case which arises with such deprecation macros is the deprecation "
"of an entire library.  In that case, all public API in the library may be"
" decorated with the ``<PREFIX>_DEPRECATED`` macro.  This results in very "
"noisy build output when building the library itself, so the macro may be "
"may be defined to empty in that case when building the deprecated "
"library:"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:252
msgid "Example Usage"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:256
msgid ""
"This section was migrated from the :manual:`cmake-compile-features(7)` "
"manual since it relies on the ``WriteCompilerDetectionHeader`` module "
"which is removed by policy :policy:`CMP0120`."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:260
msgid ""
"Compile features may be preferred if available, without creating a hard "
"requirement.  For example, a library may provide alternative "
"implementations depending on whether the ``cxx_variadic_templates`` "
"feature is available:"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:296
msgid ""
"Such an interface depends on using the correct preprocessor defines for "
"the compiler features.  CMake can generate a header file containing such "
"defines using the :module:`WriteCompilerDetectionHeader` module.  The "
"module contains the ``write_compiler_detection_header`` function which "
"accepts parameters to control the content of the generated header file:"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:312
msgid ""
"Such a header file may be used internally in the source code of a "
"project, and it may be installed and used in the interface of library "
"code."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:315
msgid ""
"For each feature listed in ``FEATURES``, a preprocessor definition is "
"created in the header file, and defined to either ``1`` or ``0``."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:318
msgid ""
"Additionally, some features call for additional defines, such as the "
"``cxx_final`` and ``cxx_override`` features. Rather than being used in "
"``#ifdef`` code, the ``final`` keyword is abstracted by a symbol which is"
" defined to either ``final``, a compiler-specific equivalent, or to "
"empty.  That way, C++ code can be written to unconditionally use the "
"symbol, and compiler support determines what it is expanded to:"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:335
msgid ""
"In this case, ``Foo_FINAL`` will expand to ``final`` if the compiler "
"supports the keyword, or to empty otherwise."
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:338
msgid ""
"In this use-case, the project code may wish to enable a particular "
"language standard if available from the compiler. The "
":prop_tgt:`CXX_STANDARD` target property may be set to the desired "
"language standard for a particular target, and the "
":variable:`CMAKE_CXX_STANDARD` variable may be set to influence all "
"following targets:"
msgstr ""

#: ../../CMake/Modules/WriteCompilerDetectionHeader.cmake:368
msgid ""
"The ``write_compiler_detection_header`` function also creates "
"compatibility code for other features which have standard equivalents.  "
"For example, the ``cxx_static_assert`` feature is emulated with a "
"template and abstracted via the ``<PREFIX>_STATIC_ASSERT`` and "
"``<PREFIX>_STATIC_ASSERT_MSG`` function-macros."
msgstr ""

